load("//tools/build_rules:module_rules.bzl", "convert_modules_to_resources", "get_module_binary")

python_library(
    name = "subprocutils",
    srcs = [
        "subprocutils.py",
    ],
    visibility = [
        "//programs/...",
        "//scripts/...",
    ],
)

python_library(
    name = "buck_version",
    srcs = [
        "buck_version.py",
    ],
    deps = [
        ":subprocutils",
    ],
)

python_binary(
    name = "gen_buck_info",
    main = "gen_buck_info.py",
    visibility = ["PUBLIC"],
    deps = [
        ":buck_version",
    ],
)

# This is bit weird.  This rule isn't idempotent, since it calls out
# to git commands to find repo information -- and this stuff clearly
# isn't enumerated in the inputs of arguments for this rule (which
# would normally add it to the rule key).  However, since we're just
# trying to generate the Buck version UID, this should work, since the
# in-repo Buck we're using to build this already implicitly adds the
# same Buck version UID to it's rule key.  But still... gross.
genrule(
    name = "gen_buck_package_info",
    out = "buck_package_info.json",
    cmd = "$(exe :gen_buck_info) > $OUT",
)

build_type = read_config("build", "type", "LOCAL_PEX")

genrule(
    name = "gen_build_type_info",
    out = "build_type_info.txt",
    bash = "echo {0} > $OUT".format(build_type),
    cmd_exe = "echo {0}> %OUT%".format(build_type),
)

# These resources cannot affect the content of build artifacts.
RESOURCES_NOT_AFFECTING_BUILD_ARTIFACTS = {
    "android_agent_path": "//assets/android:agent.apk",
    "buck_build_type_info": ":gen_build_type_info",
    "buck_package_info": ":gen_buck_package_info",
    "fix_script": "//programs/fixes/source_only_abi:fix",
    "jacoco_agent_jar": "//third-party/java/jacoco:agent",
    # The name of this resource is important, since it needs to have this filename in the PEX.
    "libjcocoa.dylib": "//third-party/java/ObjCBridge:libjcocoa.dylib",
    "logging_config_file": "//config:logging.properties",
    "report_generator_jar": "//src/com/facebook/buck/jvm/java/coverage:report-generator",
    "testrunner_classes": "//src/com/facebook/buck/testrunner:testrunner-bin-fixed",
}

# These resources contain code that can affect the content of build artifacts.
# This list needs to be updated whenever there are new libraries that can affect build artifacts.
# Failing to do so can result in build artifacts that do not reflect changes in new libraries.
# This logic is used only when Buck is runnig with the config option `cache.use_buck_binary_hash`
# set to True.
RESOURCES_AFFECTING_BUILD_ARTIFACTS = {
    "bootstrapper_jar": "//src/com/facebook/buck/cli/bootstrapper:bootstrapper",
    "buck_server": "//src/com/facebook/buck/cli:main-fixed",
    "dx": "//third-party/java/dx:etc_dx",
    "external_executor_jar": "//src/com/facebook/buck/step/external:executor",
    "native_exopackage_fake_path": "//assets/android:native-exopackage-fakes.apk",
    "path_to_pathlib_py": "//third-party/py/pathlib:pathlib.py",
    "path_to_pex": "//src/com/facebook/buck/python:pex",
    "path_to_pywatchman": "//third-party/py/pywatchman:pywatchman-archive",
    "path_to_sh_binary_template": "//src/com/facebook/buck/shell:sh_binary_template",
    "path_to_typing": "//third-party/py:typing-archive",
}

BUCK_MODULES = {
    "d": "//src/com/facebook/buck/d:d",
    "dotnet": "//src/com/facebook/buck/dotnet:dotnet",
    "go": "//src/com/facebook/buck/go:go",
    "haskell": "//src/com/facebook/buck/haskell:haskell",
    "lua": "//src/com/facebook/buck/lua:lua",
    "rust": "//src/com/facebook/buck/rust:rust",
    "zipbundler": "//src/com/facebook/buck/zip/bundler:bundler",
    "ziprules": "//src/com/facebook/buck/zip/rules:rules",
}

# This genrule generates a single hash of all resources listed in
# RESOURCES_AFFECTING_BUILD_ARTIFACTS list. The hash is stored in the output file.
genrule(
    name = "calculate-buck-binary-hash",
    out = "buck-binary-hash.txt",
    cmd = " ".join([
        "$(exe //py/hash:hash_files)",
        " ".join(["$(location {})".format(resource) for resource in RESOURCES_AFFECTING_BUILD_ARTIFACTS.values()]),
        "$(location //py/hash:hash_files.py)",
        " > $OUT",
    ]),
    visibility = [
        "PUBLIC",
    ],
)

python_library(
    name = "bucklib",
    srcs = [
        "buck_logging.py",
        "buck_package.py",
        "buck_project.py",
        "buck_repo.py",
        "buck_tool.py",
        "file_locks.py",
        "timing.py",
        "tracing.py",
    ],
    resources = dict(RESOURCES_NOT_AFFECTING_BUILD_ARTIFACTS.items() + RESOURCES_AFFECTING_BUILD_ARTIFACTS.items() + convert_modules_to_resources(BUCK_MODULES).items() + {
        "buck_binary_hash": ":calculate-buck-binary-hash",
    }.items()),
    deps = [
        ":buck_version",
        ":subprocutils",
        "//third-party/nailgun:ng",
    ],
)

load("//tools/build_rules:python_rules.bzl", "interpreter_override_args")

python_binary(
    name = "buck",
    build_args = interpreter_override_args(),
    main = "buck.py",
    visibility = [
        "//scripts/packages/debian:debian",
        "//test/com/facebook/buck/testutil/endtoend:testutil",
        "//test/com/facebook/buck/testutil/integration:integration-py",
        "//tools/...",
    ],
    deps = [
        ":bucklib",
        ":subprocutils",
    ],
)

python_binary(
    name = "buckd",
    build_args = interpreter_override_args(),
    main = "buckd.py",
    visibility = [
        "//scripts/packages/debian:debian",
    ],
    deps = [
        ":bucklib",
        ":subprocutils",
    ],
)

python_test(
    name = "test",
    srcs = glob(["test_*.py"]),
    deps = [
        ":bucklib",
        ":subprocutils",
    ],
)

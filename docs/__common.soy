{namespace buck}

/**
 * @param title
 * @param? subtitle
 * @param content
 * @param navid
 * @param? prettify true if https://code.google.com/p/google-code-prettify/
 *     should be used.
 * @param description the content of the og:description meta tag
 */
{template .page}
  {call .header}
    {param navid: $navid /}
    {param title: $title /}
    {param subtitle: $subtitle /}
    {param prettify: $prettify /}
    {param description: $description /}
  {/call}

  <div class="{css overview}">
    {$content|noAutoescape}
  </div>

  {call .footer}
    {param navid: $navid /}
    {param prettify: $prettify /}
  {/call}
{/template}

/**
 * @param title
 * @param? subtitle
 * @param navid
 * @param? prettify true if https://code.google.com/p/google-code-prettify/
 *     should be used.
 * @param description the content of the og:description meta tag
 */
{template .header}
{let $fullTitle}
  Buck: {$title}
{/let}
<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns#">
<script>
  var loc = new String(window.location);
  if (loc.indexOf('facebook.github.io/buck') != -1) {lb}
    window.location.replace(loc.replace('facebook.github.io/buck', 'buckbuild.com'));
  {rb}
</script>
<!-- Facebook Pixel Code -->
<script>
!function(f,b,e,v,n,t,s){lb}if(f.fbq)return;n=f.fbq=function(){lb}n.callMethod?n.callMethod.apply(n,arguments):n.queue.push(arguments){rb};if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s){rb}(window,document,'script','//connect.facebook.net/en_US/fbevents.js');
fbq('init', '1637165926500152');
fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
src="https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1"
/></noscript>
<!-- End Facebook Pixel Code -->
  <title>{$fullTitle}</title>
  <link type="image/png" rel="shortcut icon" href="{ROOT}static/favicon.png" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" />
  <meta http-equiv="content-type" content="text/html;charset=utf-8">
  {if $prettify}
    <link type="text/css"
          rel="stylesheet"
          href="{ROOT}google-code-prettify/prettify.css"
          >
  {/if}
  // List buck.css second to override prettify.
  <link type="text/css" rel="stylesheet" href="{ROOT}static/buck.css">
  <link type="text/css" rel="stylesheet" href="{ROOT}static/search.css">
  <link
    type="text/css"
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" />

  // TODO(mbolin): Pass $og_type in as a parameter.
  {let $og_type}
    {switch $navid}
      {case 'home'}
        website
      {default}
        article
    {/switch}
  {/let}

  <meta property="og:locale" content="en_US">
  <meta property="og:title" content="{$title}">
  <meta property="og:site_name" content="Buck: a build tool">
  <meta property="og:image" content="http://buckbuild.com/static/og.png">
  <meta property="og:type" content="{$og_type}">
  <meta property="og:description" content="{$description}">
  <meta property="fb:admins" content="{FB_APP_ID}">

  <script>
  {literal}
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-44373548-18', 'auto');
    ga('send', 'pageview');
  {/literal}
  </script>

</head>
<body>

<div id="fb-root"></div>
<script>(function(d, s, id) {lb}
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId={FB_APP_ID}";
  fjs.parentNode.insertBefore(js, fjs);
{rb}(document, 'script', 'facebook-jssdk'));</script>

  <header class='topbar'><nav class='width'>
      <a href='http://buckbuild.com/'><h1>Buck</h1></a>
      <ul class='menu'>
      <li class="algolia-search-wrapper">
        <input id="algolia-doc-search" type="search" placeholder="Search docs..." />
      </li>
        <li><a href='{ROOT}setup/getting_started.html'>Docs</a>
        <li><a href='https://groups.google.com/forum/#!forum/buck-build'>Group</a>
        <li><a href='https://github.com/facebook/buck'>GitHub</a>
      </ul>
	</nav></header>

{if $navid == 'home'}
  <header class='hero'><div class='width'>
    <hgroup>
      <h1>
        A high-performance build tool
      </h1>
      <a class='button' href='{ROOT}setup/getting_started.html'>Getting Started</a>&nbsp;
      <a class='button' href='https://github.com/facebook/buck'>GitHub</a>
    </hgroup>
    <aside>
      <img id="super_console_sample"
     src="{ROOT}static/buck-build-15fps.gif"
     alt="Chrome Tracing Sample">
    </aside>
  </div></header>
{/if}


	<section class='content'><div class='width'>

  {if $navid != 'home'}
    <article id="content">
    <h1>{$title}{if $subtitle}:<div class="subtitle">{$subtitle}</div>{/if}</h1>
  {else}
    <landing-page>
  {/if}

{/template}

/**
 * @param currentnavid The navigation id of the loaded page
 * @param page The filename of the target page
 * @param folder href folder target
 * @param text Navigation text
 */
{template .navigationLink}
  {let $targetnavid}
    {$folder}_{$page}
  {/let}
  {let $classname}
    {if $targetnavid == $currentnavid}
      navActiveItem
    {/if}
  {/let}
  <li{if isNonnull($classname)} class="{$classname}"{/if}>
    <a href="{ROOT}{$folder}/{$page}.html">{$text}</a>
  </li>
{/template}

/**
 * @param currentnavid The navigation id of the loaded page
 * @param platform
 * @param rules
 */
{template .platformBuildRuleLink}
    <li><strong>{$platform}</strong></li>
    {foreach $rule in $rules}
        {let $ruletext}
          {$rule}()
        {/let}
        {call .navigationLink}
          {param currentnavid: $currentnavid /}
          {param folder: 'rule' /}
          {param page: $rule /}
          {param text: $ruletext /}
        {/call}
    {/foreach}
{/template}

/**
 * Consider passing in the path to the URL of the page that the user
 * is currently on and not hyperlinking that item in the table of contents.
 * @param navid The navigation id of the loaded page
 */
{template .tableOfContents}
    {let $platformRulesMap: [
        'android': [
            'android_aar',
            'android_binary',
            'android_build_config',
            'android_instrumentation_apk',
            'android_instrumentation_test',
            'android_library',
            'android_manifest',
            'android_prebuilt_aar',
            'android_resource',
            'apk_genrule',
            'gen_aidl',
            'keystore',
            'ndk_library',
            'prebuilt_jar',
            'prebuilt_native_library',
        ],
        'core': [
            'command_alias',
            'export_file',
            'genrule',
            'remote_file',
            'worker_tool',
            'zip_file',
        ],
        'cxx': [
            'cxx_binary',
            'cxx_library',
            'cxx_precompiled_header',
            'cxx_test',
            'prebuilt_cxx_library',
            'prebuilt_cxx_library_group',
        ],
        'd': [
            'd_binary',
            'd_library',
            'd_test',
        ],
        'dotnet': [
            'csharp_library',
            'prebuilt_dotnet_library',
        ],
        'go': [
            'go_binary',
            'go_library',
            'go_test',
            'cgo_library',
        ],
        'groovy': [
            'groovy_library',
        ],
        'halide': [
            'halide_library',
        ],
        'haskell': [
            'haskell_binary',
            'haskell_library',
            'prebuilt_haskell_library',
        ],
        'ios': [
            'apple_asset_catalog',
            'apple_binary',
            'apple_bundle',
            'apple_library',
            'apple_package',
            'apple_resource',
            'apple_test',
            'core_data_model',
            'prebuilt_apple_framework',
        ],
        'java': [
            'java_binary',
            'java_library',
            'java_test',
            'prebuilt_jar',
            'prebuilt_native_library',
        ],
        'kotlin': [
            'kotlin_library',
            'kotlin_test',
        ],
        'lua': [
            'cxx_lua_extension',
            'lua_binary',
            'lua_library',
        ],
        'ocaml': [
            'ocaml_binary',
            'ocaml_library',
        ],
        'python': [
            'prebuilt_python_library',
            'python_binary',
            'python_library',
            'python_test',
        ],
        'rust': [
            'rust_binary',
            'rust_library',
            'rust_test',
            'prebuilt_rust_library',
        ],
    ] /}
  <h3>The Basics</h3>
  <ul>
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'setup' /}
      {param page: 'getting_started' /}
      {param text: 'Getting Started' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'about' /}
      {param page: 'overview' /}
      {param text: 'Key Topics' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'learning' /}
      {param page: 'tutorial' /}
      {param text: 'Tutorial' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'setup' /}
      {param page: 'intellij_plugin_install' /}
      {param text: 'Installing the IntelliJ Plugin' /}
    {/call}

    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'article' /}
      {param page: 'exopackage' /}
      {param text: 'Exopackage' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'article' /}
      {param page: 'query_cheat_sheet' /}
      {param text: 'Buck Query Cheat Sheet' /}
    {/call}
  </ul>
  <h3>About</h3>
  <ul>
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'what_makes_buck_so_fast' /}
      {param text: 'What Makes Buck so Fast?' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'about' /}
      {param page: 'showcase' /}
      {param text: 'Showcase' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'troubleshooting' /}
      {param text: 'Troubleshooting' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'about' /}
      {param page: 'performance_tuning' /}
      {param text: 'Performance Tuning' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'faq' /}
      {param text: 'FAQ' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'presentations' /}
      {param page: 'index' /}
      {param text: 'Learn More (Buck Presentations)' /}
    {/call}
  </ul>
  <h3>Concepts</h3>
  <ul>
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'build_rule' /}
      {param text: 'Build Rule' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'build_target' /}
      {param text: 'Build Target' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'build_file' /}
      {param text: 'Build File' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'buckjavaargs' /}
      {param text: '.buckjavaargs' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'buckconfig' /}
      {param text: '.buckconfig' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'build_target_pattern' /}
      {param text: 'Build Target Pattern' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'visibility' /}
      {param text: 'Visibility' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'http_cache_api' /}
      {param text: 'HTTP Cache API' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'rule_keys' /}
      {param text: 'Rule Keys' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'concept' /}
      {param page: 'java_abis' /}
      {param text: 'Java ABIs' /}
    {/call}
  </ul>
  <h3>Build Rules</h3>
  <ul>
    // Ugh, closure doesn't have the concept of sorting, so we cannot control the order without
    // listing it ourselves.
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Core' /}
        {param rules: $platformRulesMap['core'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Android' /}
        {param rules: $platformRulesMap['android'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'CXX' /}
        {param rules: $platformRulesMap['cxx'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'D' /}
        {param rules: $platformRulesMap['d'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Go' /}
        {param rules: $platformRulesMap['go'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Groovy' /}
        {param rules: $platformRulesMap['groovy'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Halide' /}
        {param rules: $platformRulesMap['halide'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Haskell' /}
        {param rules: $platformRulesMap['haskell'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'iOS' /}
        {param rules: $platformRulesMap['ios'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Java' /}
        {param rules: $platformRulesMap['java'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Kotlin' /}
        {param rules: $platformRulesMap['kotlin'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Lua' /}
        {param rules: $platformRulesMap['lua'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'OCaml' /}
        {param rules: $platformRulesMap['ocaml'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Python' /}
        {param rules: $platformRulesMap['python'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: 'Rust' /}
        {param rules: $platformRulesMap['rust'] /}
    {/call}
    {call .platformBuildRuleLink}
        {param currentnavid: $navid /}
        {param platform: '.Net' /}
        {param rules: $platformRulesMap['dotnet'] /}
    {/call}
  </ul>
  <h3>Functions</h3>
  <ul>
    {foreach $function in [
        'add_build_file_dep',
        'allow_unsafe_import',
        'flatten_dicts',
        'glob',
        'get_base_path',
        'get_cell_name',
        'host_info',
        'include_defs',
        'load',
        'read_config',
        'subdir_glob',
        ]}
      {let $functiontext}
        {$function}()
      {/let}
      {call .navigationLink}
        {param currentnavid: $navid /}
        {param folder: 'function' /}
        {param page: $function /}
        {param text: $functiontext /}
      {/call}
    {/foreach}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'function' /}
      {param page: 'string_parameter_macros' /}
      {param text: 'String Parameter Macros' /}
    {/call}
  </ul>
  <h3>Commands</h3>
  <ul>
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'command' /}
      {param page: 'common_parameters' /}
      {param text: 'Common Parameters' /}
    {/call}
    {foreach $command in [
        'audit',
        'build',
        'clean',
        'doctor',
        'fetch',
        'fix',
        'install',
        'project',
        'publish',
        'query',
        'run',
        'root',
        'server',
        'suggest',
        'targets',
        'test',
        'uninstall',
        ]}
      {let $commandtext}
        buck {$command}
      {/let}
      {call .navigationLink}
        {param currentnavid: $navid /}
        {param folder: 'command' /}
        {param page: $command /}
        {param text: $commandtext /}
      {/call}
    {/foreach}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'command' /}
      {param page: 'buckd' /}
      {param text: 'buckd' /}
    {/call}
  </ul>
  <h3>Extending Buck</h3>
  <ul>
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'extending' /}
      {param page: 'macros' /}
      {param text: 'Custom Macros' /}
    {/call}
    {call .navigationLink}
      {param currentnavid: $navid /}
      {param folder: 'extending' /}
      {param page: 'rules' /}
      {param text: 'Custom Rules' /}
    {/call}
  </ul>
{/template}

/**
 * @param navid The current page's navigation id.
 * @param? prettify true if https://code.google.com/p/google-code-prettify/
 *     should be used.
 */
{template .footer}

{if $navid != 'home'}
  </article>
  <nav>
    {call buck.tableOfContents data="all"}
      {param navid: $navid /}
    {/call}
  </nav>
{else}
  </landing-page>
{/if}

</div></section>

<footer><div class='width'>
  &copy; Copyright Facebook, 2013 -
</div></footer>

<!-- Algolia Search Code -->
<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js">
</script>
<script>
{literal}
docsearch({
  apiKey: 'c25b7174e8f6161ce5fdd44bb0b95081',
  indexName: 'buckbuild',
  inputSelector: '#algolia-doc-search',
  debug: false // Set debug to true if you want to inspect the dropdown
});
{/literal}
</script>
<!-- End Algolia Search Code -->

{if hasData() and $prettify}
  <script src="{ROOT}google-code-prettify/prettify.js"></script>
  <script>prettyPrint()</script>
{/if}

</body>
</html>

{/template}


/**
 * Used to format an argument to a build rule.
 *
 * @param name Name of the argument.
 * @param? default What the default value should be. If null, the argument is
 *     required.
 * @param desc Prose description of the argument.
 */
{template .arg}
<li id="{$name}" class="arg">
  <h3>
    <code class="argName">{$name}</code>
    {sp}
    <span class="argDefault">
      {if isNonnull($default)}
        (defaults to <code>{$default}</code>)
      {else}
        (required)
      {/if}
    </span>
    {sp}
    <a class="inline-link" href="#{$name}">#</a>
  </h3>
  <p>
    {$desc|noAutoescape}
  </p>
</li>
{/template}


/**
 * @param overview HTML description of the rule.
 * @param status one of FROZEN, UNFROZEN, or DEPRECATED to indicate the
       current level of support for the rule.
 * @param args HTML documentation for each arg for the rule.
 *     Should be created using multiple applications of the {buck.arg}
 *     template.
 * @param? flavors HTML documentation for each flavor supported by the rule.
 *     Should be created using multiple applications of the {buck.arg}
 *     template.
 * @param? examples HTML documentation that shows examples of the build
 *     rule in action.
 * @param? furtherexp Further explanation; HTML shown after arguments and
        examples.
 */
{template .rule}
{switch $status}
  {case 'FROZEN'}
    // Nothing to show here.
  {case 'UNFROZEN'}
    <p><small>This is liable to change in the future.</small></p>
  {case 'DEPRECATED'}
    <p><small>This will be removed in the future.</small></p>
{/switch}
{$overview|noAutoescape}

<h2>Arguments</h2>
<ul class="{css arglist}">
  {$args|noAutoescape}
  {call buck.visibility_arg /}
  {call buck.licenses_arg /}
  {call buck.labels_arg /}
</ul>

{if $flavors}
  <h2>Flavors</h2>
  {$flavors|noAutoescape}
{/if}

{if $examples}
  <h2>Examples</h2>
  {$examples|noAutoescape}
{/if}
{if $furtherexp}
  {$furtherexp|noAutoescape}
{/if}
{/template}

/**
 * Used to format an argument to a build rule.
 *
 * @param? name Name of the argument.
 * @param? default What the default value should be. If null, the argument is
 *     required.
 * @param desc Prose description of the argument.
 */
{template .functionArg}
  <li class="{css arg}">
    {if $name}
      <code>{$name}</code>{sp}
    {/if}

  {if isNonnull($default)}
    (defaults to <code>{$default}</code>)
    {sp}
  {/if}

  {$desc|noAutoescape}
{/template}


/**
 * Used to format a parameter of a command.
 *
 * @param name Name of the parameter.
 * @param? nodash If set, do not add "--" prefix to $name.
 * @param? alias The alias for this parameter.
 * @param desc Prose description of the parameter.
 */
{template .param}
  <li class="{css arg}"><code>{if not $nodash}--{/if}{$name}</code>
  {sp}
  {if $alias}
    <code>(-{$alias})</code>
  {/if}

  {sp}
  {$desc|noAutoescape}

{/template}


/**
 * @param overview HTML description of the command.
 * @param? params HTML documentation for each param of the command.
 *     Should be created using multiple applications of the {buck.param}
 *     template.
 * @param? examples HTML documentation that shows examples of the build
 *     rule in action.
 */
{template .command}
{$overview|noAutoescape}

{if $params}
  <h2>Parameters</h2>
  <ul class="{css arglist}">
    {$params|noAutoescape}
  </ul>
{/if}

{if $examples}
  <h2>Examples</h2>
  {$examples|noAutoescape}
{/if}
{/template}


/**
 * @param overview HTML description of the function.
 * @param status one of FROZEN, UNFROZEN, or DEPRECATED to indicate the
       current level of support for the rule.
 * @param args HTML documentation for each arg for the function.
 *     Should be created using multiple applications of the {buck.functionArg}
 *     template.
 * @param? examples HTML documentation that shows examples of the function
 *     in action.
 * @param? furtherexp Further explanation; HTML shown after arguments and
        examples.
 */
{template .function}
{switch $status}
  {case 'FROZEN'}
    // Nothing to show here.
  {case 'UNFROZEN'}
    <p><small>This is liable to change in the future.</small></p>
  {case 'DEPRECATED'}
    <p><small>This will be removed in the future.</small></p>
{/switch}
{$overview|noAutoescape}

<h2>Arguments</h2>
<ul class="{css arglist}">
  {$args|noAutoescape}
</ul>

{if $examples}
  <h2>Examples</h2>
  {$examples|noAutoescape}
{/if}

{if $furtherexp}
  {$furtherexp|noAutoescape}
{/if}
{/template}


/**
 * @param name
 * @param? section
 */
{template .ruleLink}
  {if not $section}
    <a href="{ROOT}rule/{$name}.html"><code>{$name}</code></a>
  {else}
    <a href="{ROOT}rule/{$name}.html#{$section}"><code>{$section}</code></a>
  {/if}
{/template}

/***/
{template .abi_rule_keys}
{call .concept_link_heading}{param page : 'rule_keys' /}{param heading : 'abi_rule_keys' /}{param name : 'ABI rule keys' /}{/call}
{/template}

/***/
{template .android_aar}
{call .ruleLink}{param name : 'android_aar' /}{/call}
{/template}

/***/
{template .android_binary}
{call .ruleLink}{param name : 'android_binary' /}{/call}
{/template}

/***/
{template .android_build_config}
{call .ruleLink}{param name : 'android_build_config' /}{/call}
{/template}

/***/
{template .android_instrumentation_apk}
{call .ruleLink}{param name : 'android_instrumentation_apk' /}{/call}
{/template}

/***/
{template .android_library}
{call .ruleLink}{param name : 'android_library' /}{/call}
{/template}

/***/
{template .android_manifest}
{call .ruleLink}{param name : 'android_manifest' /}{/call}
{/template}

/***/
{template .android_prebuilt_aar}
{call .ruleLink}{param name : 'android_prebuilt_aar' /}{/call}
{/template}

/***/
{template .android_resource}
{call .ruleLink}{param name : 'android_resource' /}{/call}
{/template}

/***/
{template .apk_genrule}
{call .ruleLink}{param name : 'apk_genrule' /}{/call}
{/template}

/***/
{template .apple_binary}
{call .ruleLink}{param name: 'apple_binary' /}{/call}
{/template}

/***/
{template .apple_bundle}
{call .ruleLink}{param name: 'apple_bundle' /}{/call}
{/template}

/***/
{template .apple_library}
{call .ruleLink}{param name: 'apple_library' /}{/call}
{/template}

/***/
{template .genrule}
{call .ruleLink}{param name : 'genrule' /}{/call}
{/template}

/***/
{template .groovy_library}
{call .ruleLink}{param name : 'groovy_library' /}{/call}
{/template}

/***/
{template .haskell_binary}
{call .ruleLink}{param name : 'haskell_binary' /}{/call}
{/template}

/***/
{template .haskell_library}
{call .ruleLink}{param name : 'haskell_library' /}{/call}
{/template}

/***/
{template .prebuilt_haskell_library}
{call .ruleLink}{param name : 'prebuilt_haskell_library' /}{/call}
{/template}

/***/
{template .java_binary}
{call .ruleLink}{param name : 'java_binary' /}{/call}
{/template}

/***/
{template .java_library}
{call .ruleLink}{param name : 'java_library' /}{/call}
{/template}

/***/
{template .java_test}
{call .ruleLink}{param name : 'java_test' /}{/call}
{/template}

/***/
{template .kotlin_library}
{call .ruleLink}{param name : 'kotlin_library' /}{/call}
{/template}

/***/
{template .kotlin_test}
{call .ruleLink}{param name : 'kotlin_test' /}{/call}
{/template}

/***/
{template .cxx_lua_extension}
{call .ruleLink}{param name : 'cxx_lua_extension' /}{/call}
{/template}

/***/
{template .lua_binary}
{call .ruleLink}{param name : 'lua_binary' /}{/call}
{/template}

/***/
{template .lua_library}
{call .ruleLink}{param name : 'lua_library' /}{/call}
{/template}

/***/
{template .keystore}
{call .ruleLink}{param name : 'keystore' /}{/call}
{/template}

/***/
{template .ndk_library}
{call .ruleLink}{param name : 'ndk_library' /}{/call}
{/template}

/***/
{template .prebuilt_jar}
{call .ruleLink}{param name : 'prebuilt_jar' /}{/call}
{/template}

/***/
{template .prebuilt_cxx_library}
{call .ruleLink}{param name : 'prebuilt_cxx_library' /}{/call}
{/template}

/***/
{template .prebuilt_cxx_library_group}
{call .ruleLink}{param name : 'prebuilt_cxx_library_group' /}{/call}
{/template}

/***/
{template .prebuilt_python_library}
{call .ruleLink}{param name : 'prebuilt_python_library' /}{/call}
{/template}

/***/
{template .python_binary}
{call .ruleLink}{param name : 'python_binary' /}{/call}
{/template}

/***/
{template .python_library}
{call .ruleLink}{param name : 'python_library' /}{/call}
{/template}

/***/
{template .python_test}
{call .ruleLink}{param name : 'python_test' /}{/call}
{/template}

/***/
{template .remote_file}
{call .ruleLink}{param name : 'remote_file' /}{/call}
{/template}

/***/
{template .cxx_library}
{call .ruleLink}{param name : 'cxx_library' /}{/call}
{/template}

/***/
{template .reexport_all_header_dependencies}
{call .ruleLink}
  {param name : 'cxx_library' /}
  {param section : 'reexport_all_header_dependencies' /}
{/call}
{/template}

/***/
{template .fn_add_build_file_dep}
<a href="{ROOT}function/add_build_file_dep.html"><code>add_build_file_dep()</code></a>
{/template}

/***/
{template .fn_glob}
<a href="{ROOT}function/glob.html"><code>glob()</code></a>
{/template}

/***/
{template .fn_include_defs}
<a href="{ROOT}function/include_defs.html"><code>include_defs()</code></a>
{/template}

/***/
{template .fn_load}
<a href="{ROOT}function/load.html"><code>load()</code></a>
{/template}

/***/
{template .fn_read_config}
<a href="{ROOT}function/read_config.html"><code>read_config()</code></a>
{/template}

/***/
{template .fn_host_info}
<a href="{ROOT}function/host_info.html"><code>host_info()</code></a>
{/template}

/***/
{template .string_parameter_macros}
<a href="{ROOT}function/string_parameter_macros.html">string parameter macros</a>
{/template}

/***/
{template .fn_flatten_dicts}
<a href="{ROOT}function/flatten_dicts.html"><code>flatten_dicts()</code></a>
{/template}


/**
 * @param page
 * @param name
 */
{template .concept_link}
<a href="{ROOT}concept/{$page}.html">{$name}</a>
{/template}

/**
 * @param page
 * @param name
 * @param heading
 */
{template .concept_link_heading}
<a href="{ROOT}concept/{$page}.html#{$heading}">{$name}</a>
{/template}

/***/
{template .build_file}
{call .concept_link}{param page: 'build_file' /}{param name: 'build file' /}{/call}
{/template}

/***/
{template .build_rule}
{call .concept_link}{param page: 'build_rule' /}{param name: 'build rule' /}{/call}
{/template}

/***/
{template .build_target}
{call .concept_link}{param page: 'build_target' /}{param name: 'build target' /}{/call}
{/template}

/***/
{template .build_target_pattern}
  {call .concept_link}
    {param page: 'build_target_pattern' /}
    {param name: 'build target pattern' /}
  {/call}
{/template}

/***/
{template .setup_install}
<a href="{ROOT}setup/install.html">Downloading and Installing Buck</a>
{/template}

/***/
{template .macros}
<a href="{ROOT}extending/macros.html"><code>macros</code></a>
{/template}

/***/
{template .setup_build_intellij_plugin}
<a href="{ROOT}setup/intellij_plugin_build.html">Building the Buck Intellij Plugin</a>
{/template}

/**
 * @param name
 */
{template .cmd_link}
<a href="{ROOT}command/{$name}.html"><code>buck {$name}</code></a>
{/template}

/***/
{template .cmd_build}
{call .cmd_link}{param name : 'build' /}{/call}
{/template}

/***/
{template .cmd_clean}
{call .cmd_link}{param name : 'clean' /}{/call}
{/template}

/***/
{template .cmd_buckd}
<a href="{ROOT}command/buckd.html"><code>buckd</code></a>
{/template}

/***/
{template .cmd_fetch}
{call .cmd_link}{param name : 'fetch' /}{/call}
{/template}

/***/
{template .cmd_fix}
{call .cmd_link}{param name : 'fix' /}{/call}
{/template}

/***/
{template .cmd_install}
{call .cmd_link}{param name : 'install' /}{/call}
{/template}

/***/
{template .cmd_project}
{call .cmd_link}{param name : 'project' /}{/call}
{/template}

/***/
{template .cmd_root}
{call .cmd_link}{param name : 'root' /}{/call}
{/template}

/***/
{template .cmd_run}
{call .cmd_link}{param name : 'run' /}{/call}
{/template}

/***/
{template .cmd_test}
{call .cmd_link}{param name: 'test' /}{/call}
{/template}

/***/
{template .cmd_uninstall}
{call .cmd_link}{param name : 'uninstall' /}{/call}
{/template}

/***/
{template .cmd_query}
{call .cmd_link}{param name : 'query' /}{/call}
{/template}

/***/
{template .concept_buckconfig}
<a href="{ROOT}concept/buckconfig.html"><code>.buckconfig</code></a>
{/template}

/***/
{template .deps_query_arg}
{call buck.arg}
  {param name: 'deps_query' /}
  {param default : 'None' /}
  {param desc}
  Status: <strong>experimental/unstable</strong>.
  The deps query takes a query string that accepts the following query functions, and appends the
  output of the query to the declared deps:
  {literal}
  <ul style="line-height:0.5em">
    <li><code>attrfilter</code></li>
    <li><code>deps</code></li>
    <li><code>except</code></li>
    <li><code>intersect</code></li>
    <li><code>filter</code></li>
    <li><code>kind</code></li>
    <li><code>set</code></li>
    <li><code>union</code></li>
  </ul>
  {/literal}

  The macro <code>$declared_deps</code> may be used anywhere a target literal pattern is expected
  in order to refer to the explicit deps of this rule as they appear in the rule's definition.
  For example, if your build rule declares
  {literal}<pre class="prettyprint lang-py">
  android_library(
    name = 'lib',
    deps = ['//foo:foo'],
    deps_query = '$declared_deps',
  )</pre>
  {/literal}
  then the macro <code>$declared_deps</code> would be expanded to a
  literal <code>set(//foo:foo)</code>.
  Some example queries:
  {literal}<pre>
  "filter({name_regex}, $declared_deps)".format(name_regex='//.*')
  "attrfilter(annotation_processors, com.foo.Processor, $declared_deps)"</pre>
  {/literal}
  {/param}
{/call}
{/template}

/***/
{template .provided_deps_query_arg}
{call buck.arg}
  {param name: 'provided_deps_query' /}
  {param default : 'None' /}
  {param desc}
  Status: <strong>experimental/unstable</strong>.
  The provided deps query functions in the same way as the deps query, but the referenced deps
  using <code>$declared</code> are the provided deps of the target, and the results of the query
  are appended to the declared provided deps.
  {/param}
{/call}
{/template}

/***/
{template .licenses_arg}
{call buck.arg}
  {param name: 'licenses' /}
  {param default: '[]' /}
  {param desc}
  Set of license files for this library.  To get the list of license files for a given{sp}
  {call buck.build_rule /} and all of its dependencies, you can use {call buck.cmd_query /}.
  {/param}
{/call}
{/template}

/***/
{template .labels_arg}
{call buck.arg}
  {param name: 'labels' /}
  {param default: '[]' /}
  {param desc}
  Set of arbitrary strings which allow you to annotate a {call buck.build_rule /} with tags
  that can be searched for over an entire dependency tree using {call buckquery.attrfilter /}.
  {/param}
{/call}
{/template}

/***/
{template .visibility_arg}
{call buck.arg}
  {param name : 'visibility' /}
  {param default : '[]' /}
  {param desc}
  List of <a href="{ROOT}concept/build_target_pattern.html">build
  target patterns</a> that identify the build rules that can include
  this rule in its <code>deps</code>.
  {/param}
{/call}
{/template}

/***/
{template .tests_arg}
{call buck.arg}
  {param name : 'tests' /}
  {param default : '[]' /}
  {param desc}
  List of <a href="{ROOT}concept/build_target.html">build targets</a> that
  identify the test rules that exercise this target.
  {/param}
{/call}
{/template}

/***/
{template .tests_apple_arg}
{call buck.arg}
  {param name : 'tests' /}
  {param default : '[]' /}
  {param desc}
  List of <a href="{ROOT}concept/build_target.html">build targets</a> that
  identify the test rules that exercise this target.  Note that
  non <a href="{ROOT}rule/apple_test.html"><code>apple_test</code></a> targets
  will not be included in generated projects due to Xcode's limitations but will still work
  with <a href="{ROOT}command/test.html"><code>buck test</code></a>.
  {/param}
{/call}
{/template}

/***/
{template .test_label_arg}
{call buck.arg}
  {param name: 'labels' /}
  {param default: '[]' /}
  {param desc}
  A list of labels to be applied to these tests. These labels are
  arbitrary text strings and have no meaning within buck itself. They
  can, however, have meaning for you as a test author
  (e.g., <code>smoke</code> or <code>fast</code>). A label can be
  used to filter or include a specific test rule
  when executing <a href="{ROOT}command/test.html"><code>buck
  test</code></a>.
  {/param}
{/call}
{/template}

/***/
{template .run_test_separately_arg}
{call buck.arg}
  {param name: 'run_test_separately' /}
  {param default : 'False' /}
  {param desc}
  If set to <code>True</code>, the test(s) in this rule are run separately
  from all other tests. (This is useful
  for integration tests which access a physical device or other limited
  resource.)
  <p>If unset, the test(s) in this rule in parallel with all other tests.</p>
  {/param}
{/call}
{/template}

/***/
{template .fork_mode}
{call buck.arg}
  {param name: 'fork_mode' /}
  {param default : 'None' /}
  {param desc}
  Controls whether tests will all be run in the same process or a process will be
  started for each set of tests in a class.

  (This is mainly useful when porting Java tests to Buck from Apache Ant which
  allows JUnit tasks to set a <code>fork="yes"</code> property. It should not be
  used for new tests since it encourages tests to not cleanup after themselves and
  increases the tests' computational resources and running time.)

  <dl>
    <dt><code>none</code></dt>
    <dd>All tests will run in the same process.</dd>
    <dt><code>per_test</code></dt>
    <dd>A process will be started for each test class in which all tests of that test class
        will run.</dd>
  </dl>
  {/param}
{/call}
{/template}

/***/
{template .test_rule_timeout_ms}
{call buck.arg}
  {param name: 'test_rule_timeout_ms' /}
  {param default: 'None' /}
  {param desc}
  If set specifies the maximum amount of time (in milliseconds) in which all of the tests in this
  rule should complete. This overrides the default <code>rule_timeout</code> if any has been
  specified in {call buckconfig.test_rule_timeout /}.
  {/param}
{/call}
{/template}

/**
 * @param? withAlias
 * @param? isWindows
 */
{template .installationInstructions}
{literal}<pre>
git clone https://github.com/facebook/buck.git
cd buck
ant{/literal}{\n}
{if $withAlias and not $isWindows}
sudo ln -s ${lb}PWD{rb}/bin/buck /usr/bin/buck
{elseif not $isWindows}
./bin/buck --help
{else}
.\bin\buck --help
{/if}
</pre>
{/template}

/**
 * @param newURL
 */
{template .redirectTo}
<!DOCTYPE html>
<meta charset="utf-8">
<title>Redirecting...</title>
<link rel=canonical href="{$newURL}">
<meta http-equiv=refresh content="0; url={$newURL}">
<h1>Redirecting...</h1>
<a href="{$newURL}">Click here if you are not redirected.</a>
<script>location="{$newURL}"</script>
{/template}

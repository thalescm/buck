/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-01")
public class BuildSlaveStatus implements org.apache.thrift.TBase<BuildSlaveStatus, BuildSlaveStatus._Fields>, java.io.Serializable, Cloneable, Comparable<BuildSlaveStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuildSlaveStatus");

  private static final org.apache.thrift.protocol.TField STAMPEDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stampedeId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BUILD_SLAVE_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buildSlaveRunId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_RULES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRulesCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField RULES_BUILDING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rulesBuildingCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RULES_FINISHED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rulesFinishedCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField RULES_FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rulesFailureCount", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CACHE_RATE_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheRateStats", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED_FIELD_DESC = new org.apache.thrift.protocol.TField("httpArtifactTotalBytesUploaded", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("httpArtifactUploadsScheduledCount", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("httpArtifactUploadsOngoingCount", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("httpArtifactUploadsSuccessCount", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("httpArtifactUploadsFailureCount", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField FILES_MATERIALIZED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("filesMaterializedCount", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuildSlaveStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuildSlaveStatusTupleSchemeFactory();

  public com.facebook.buck.distributed.thrift.StampedeId stampedeId; // optional
  public com.facebook.buck.distributed.thrift.BuildSlaveRunId buildSlaveRunId; // optional
  public int totalRulesCount; // optional
  public int rulesBuildingCount; // optional
  public int rulesFinishedCount; // optional
  public int rulesFailureCount; // optional
  public CacheRateStats cacheRateStats; // optional
  public long httpArtifactTotalBytesUploaded; // optional
  public int httpArtifactUploadsScheduledCount; // optional
  public int httpArtifactUploadsOngoingCount; // optional
  public int httpArtifactUploadsSuccessCount; // optional
  public int httpArtifactUploadsFailureCount; // optional
  public int filesMaterializedCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAMPEDE_ID((short)1, "stampedeId"),
    BUILD_SLAVE_RUN_ID((short)2, "buildSlaveRunId"),
    TOTAL_RULES_COUNT((short)10, "totalRulesCount"),
    RULES_BUILDING_COUNT((short)11, "rulesBuildingCount"),
    RULES_FINISHED_COUNT((short)12, "rulesFinishedCount"),
    RULES_FAILURE_COUNT((short)14, "rulesFailureCount"),
    CACHE_RATE_STATS((short)20, "cacheRateStats"),
    HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED((short)21, "httpArtifactTotalBytesUploaded"),
    HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT((short)22, "httpArtifactUploadsScheduledCount"),
    HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT((short)23, "httpArtifactUploadsOngoingCount"),
    HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT((short)24, "httpArtifactUploadsSuccessCount"),
    HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT((short)25, "httpArtifactUploadsFailureCount"),
    FILES_MATERIALIZED_COUNT((short)30, "filesMaterializedCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAMPEDE_ID
          return STAMPEDE_ID;
        case 2: // BUILD_SLAVE_RUN_ID
          return BUILD_SLAVE_RUN_ID;
        case 10: // TOTAL_RULES_COUNT
          return TOTAL_RULES_COUNT;
        case 11: // RULES_BUILDING_COUNT
          return RULES_BUILDING_COUNT;
        case 12: // RULES_FINISHED_COUNT
          return RULES_FINISHED_COUNT;
        case 14: // RULES_FAILURE_COUNT
          return RULES_FAILURE_COUNT;
        case 20: // CACHE_RATE_STATS
          return CACHE_RATE_STATS;
        case 21: // HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED
          return HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED;
        case 22: // HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT
          return HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT;
        case 23: // HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT
          return HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT;
        case 24: // HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT
          return HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT;
        case 25: // HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT
          return HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT;
        case 30: // FILES_MATERIALIZED_COUNT
          return FILES_MATERIALIZED_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALRULESCOUNT_ISSET_ID = 0;
  private static final int __RULESBUILDINGCOUNT_ISSET_ID = 1;
  private static final int __RULESFINISHEDCOUNT_ISSET_ID = 2;
  private static final int __RULESFAILURECOUNT_ISSET_ID = 3;
  private static final int __HTTPARTIFACTTOTALBYTESUPLOADED_ISSET_ID = 4;
  private static final int __HTTPARTIFACTUPLOADSSCHEDULEDCOUNT_ISSET_ID = 5;
  private static final int __HTTPARTIFACTUPLOADSONGOINGCOUNT_ISSET_ID = 6;
  private static final int __HTTPARTIFACTUPLOADSSUCCESSCOUNT_ISSET_ID = 7;
  private static final int __HTTPARTIFACTUPLOADSFAILURECOUNT_ISSET_ID = 8;
  private static final int __FILESMATERIALIZEDCOUNT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STAMPEDE_ID,_Fields.BUILD_SLAVE_RUN_ID,_Fields.TOTAL_RULES_COUNT,_Fields.RULES_BUILDING_COUNT,_Fields.RULES_FINISHED_COUNT,_Fields.RULES_FAILURE_COUNT,_Fields.CACHE_RATE_STATS,_Fields.HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED,_Fields.HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT,_Fields.HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT,_Fields.HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT,_Fields.HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT,_Fields.FILES_MATERIALIZED_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAMPEDE_ID, new org.apache.thrift.meta_data.FieldMetaData("stampedeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.facebook.buck.distributed.thrift.StampedeId.class)));
    tmpMap.put(_Fields.BUILD_SLAVE_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("buildSlaveRunId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.facebook.buck.distributed.thrift.BuildSlaveRunId.class)));
    tmpMap.put(_Fields.TOTAL_RULES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalRulesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RULES_BUILDING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rulesBuildingCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RULES_FINISHED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rulesFinishedCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RULES_FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rulesFailureCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACHE_RATE_STATS, new org.apache.thrift.meta_data.FieldMetaData("cacheRateStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CacheRateStats.class)));
    tmpMap.put(_Fields.HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED, new org.apache.thrift.meta_data.FieldMetaData("httpArtifactTotalBytesUploaded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("httpArtifactUploadsScheduledCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("httpArtifactUploadsOngoingCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("httpArtifactUploadsSuccessCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("httpArtifactUploadsFailureCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILES_MATERIALIZED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("filesMaterializedCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildSlaveStatus.class, metaDataMap);
  }

  public BuildSlaveStatus() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuildSlaveStatus(BuildSlaveStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStampedeId()) {
      this.stampedeId = new com.facebook.buck.distributed.thrift.StampedeId(other.stampedeId);
    }
    if (other.isSetBuildSlaveRunId()) {
      this.buildSlaveRunId = new com.facebook.buck.distributed.thrift.BuildSlaveRunId(other.buildSlaveRunId);
    }
    this.totalRulesCount = other.totalRulesCount;
    this.rulesBuildingCount = other.rulesBuildingCount;
    this.rulesFinishedCount = other.rulesFinishedCount;
    this.rulesFailureCount = other.rulesFailureCount;
    if (other.isSetCacheRateStats()) {
      this.cacheRateStats = new CacheRateStats(other.cacheRateStats);
    }
    this.httpArtifactTotalBytesUploaded = other.httpArtifactTotalBytesUploaded;
    this.httpArtifactUploadsScheduledCount = other.httpArtifactUploadsScheduledCount;
    this.httpArtifactUploadsOngoingCount = other.httpArtifactUploadsOngoingCount;
    this.httpArtifactUploadsSuccessCount = other.httpArtifactUploadsSuccessCount;
    this.httpArtifactUploadsFailureCount = other.httpArtifactUploadsFailureCount;
    this.filesMaterializedCount = other.filesMaterializedCount;
  }

  public BuildSlaveStatus deepCopy() {
    return new BuildSlaveStatus(this);
  }

  @Override
  public void clear() {
    this.stampedeId = null;
    this.buildSlaveRunId = null;
    setTotalRulesCountIsSet(false);
    this.totalRulesCount = 0;
    setRulesBuildingCountIsSet(false);
    this.rulesBuildingCount = 0;
    setRulesFinishedCountIsSet(false);
    this.rulesFinishedCount = 0;
    setRulesFailureCountIsSet(false);
    this.rulesFailureCount = 0;
    this.cacheRateStats = null;
    setHttpArtifactTotalBytesUploadedIsSet(false);
    this.httpArtifactTotalBytesUploaded = 0;
    setHttpArtifactUploadsScheduledCountIsSet(false);
    this.httpArtifactUploadsScheduledCount = 0;
    setHttpArtifactUploadsOngoingCountIsSet(false);
    this.httpArtifactUploadsOngoingCount = 0;
    setHttpArtifactUploadsSuccessCountIsSet(false);
    this.httpArtifactUploadsSuccessCount = 0;
    setHttpArtifactUploadsFailureCountIsSet(false);
    this.httpArtifactUploadsFailureCount = 0;
    setFilesMaterializedCountIsSet(false);
    this.filesMaterializedCount = 0;
  }

  public com.facebook.buck.distributed.thrift.StampedeId getStampedeId() {
    return this.stampedeId;
  }

  public BuildSlaveStatus setStampedeId(com.facebook.buck.distributed.thrift.StampedeId stampedeId) {
    this.stampedeId = stampedeId;
    return this;
  }

  public void unsetStampedeId() {
    this.stampedeId = null;
  }

  /** Returns true if field stampedeId is set (has been assigned a value) and false otherwise */
  public boolean isSetStampedeId() {
    return this.stampedeId != null;
  }

  public void setStampedeIdIsSet(boolean value) {
    if (!value) {
      this.stampedeId = null;
    }
  }

  public com.facebook.buck.distributed.thrift.BuildSlaveRunId getBuildSlaveRunId() {
    return this.buildSlaveRunId;
  }

  public BuildSlaveStatus setBuildSlaveRunId(com.facebook.buck.distributed.thrift.BuildSlaveRunId buildSlaveRunId) {
    this.buildSlaveRunId = buildSlaveRunId;
    return this;
  }

  public void unsetBuildSlaveRunId() {
    this.buildSlaveRunId = null;
  }

  /** Returns true if field buildSlaveRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildSlaveRunId() {
    return this.buildSlaveRunId != null;
  }

  public void setBuildSlaveRunIdIsSet(boolean value) {
    if (!value) {
      this.buildSlaveRunId = null;
    }
  }

  public int getTotalRulesCount() {
    return this.totalRulesCount;
  }

  public BuildSlaveStatus setTotalRulesCount(int totalRulesCount) {
    this.totalRulesCount = totalRulesCount;
    setTotalRulesCountIsSet(true);
    return this;
  }

  public void unsetTotalRulesCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALRULESCOUNT_ISSET_ID);
  }

  /** Returns true if field totalRulesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRulesCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALRULESCOUNT_ISSET_ID);
  }

  public void setTotalRulesCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALRULESCOUNT_ISSET_ID, value);
  }

  public int getRulesBuildingCount() {
    return this.rulesBuildingCount;
  }

  public BuildSlaveStatus setRulesBuildingCount(int rulesBuildingCount) {
    this.rulesBuildingCount = rulesBuildingCount;
    setRulesBuildingCountIsSet(true);
    return this;
  }

  public void unsetRulesBuildingCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RULESBUILDINGCOUNT_ISSET_ID);
  }

  /** Returns true if field rulesBuildingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRulesBuildingCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RULESBUILDINGCOUNT_ISSET_ID);
  }

  public void setRulesBuildingCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RULESBUILDINGCOUNT_ISSET_ID, value);
  }

  public int getRulesFinishedCount() {
    return this.rulesFinishedCount;
  }

  public BuildSlaveStatus setRulesFinishedCount(int rulesFinishedCount) {
    this.rulesFinishedCount = rulesFinishedCount;
    setRulesFinishedCountIsSet(true);
    return this;
  }

  public void unsetRulesFinishedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RULESFINISHEDCOUNT_ISSET_ID);
  }

  /** Returns true if field rulesFinishedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRulesFinishedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RULESFINISHEDCOUNT_ISSET_ID);
  }

  public void setRulesFinishedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RULESFINISHEDCOUNT_ISSET_ID, value);
  }

  public int getRulesFailureCount() {
    return this.rulesFailureCount;
  }

  public BuildSlaveStatus setRulesFailureCount(int rulesFailureCount) {
    this.rulesFailureCount = rulesFailureCount;
    setRulesFailureCountIsSet(true);
    return this;
  }

  public void unsetRulesFailureCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RULESFAILURECOUNT_ISSET_ID);
  }

  /** Returns true if field rulesFailureCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRulesFailureCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RULESFAILURECOUNT_ISSET_ID);
  }

  public void setRulesFailureCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RULESFAILURECOUNT_ISSET_ID, value);
  }

  public CacheRateStats getCacheRateStats() {
    return this.cacheRateStats;
  }

  public BuildSlaveStatus setCacheRateStats(CacheRateStats cacheRateStats) {
    this.cacheRateStats = cacheRateStats;
    return this;
  }

  public void unsetCacheRateStats() {
    this.cacheRateStats = null;
  }

  /** Returns true if field cacheRateStats is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheRateStats() {
    return this.cacheRateStats != null;
  }

  public void setCacheRateStatsIsSet(boolean value) {
    if (!value) {
      this.cacheRateStats = null;
    }
  }

  public long getHttpArtifactTotalBytesUploaded() {
    return this.httpArtifactTotalBytesUploaded;
  }

  public BuildSlaveStatus setHttpArtifactTotalBytesUploaded(long httpArtifactTotalBytesUploaded) {
    this.httpArtifactTotalBytesUploaded = httpArtifactTotalBytesUploaded;
    setHttpArtifactTotalBytesUploadedIsSet(true);
    return this;
  }

  public void unsetHttpArtifactTotalBytesUploaded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTPARTIFACTTOTALBYTESUPLOADED_ISSET_ID);
  }

  /** Returns true if field httpArtifactTotalBytesUploaded is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpArtifactTotalBytesUploaded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTPARTIFACTTOTALBYTESUPLOADED_ISSET_ID);
  }

  public void setHttpArtifactTotalBytesUploadedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTPARTIFACTTOTALBYTESUPLOADED_ISSET_ID, value);
  }

  public int getHttpArtifactUploadsScheduledCount() {
    return this.httpArtifactUploadsScheduledCount;
  }

  public BuildSlaveStatus setHttpArtifactUploadsScheduledCount(int httpArtifactUploadsScheduledCount) {
    this.httpArtifactUploadsScheduledCount = httpArtifactUploadsScheduledCount;
    setHttpArtifactUploadsScheduledCountIsSet(true);
    return this;
  }

  public void unsetHttpArtifactUploadsScheduledCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTPARTIFACTUPLOADSSCHEDULEDCOUNT_ISSET_ID);
  }

  /** Returns true if field httpArtifactUploadsScheduledCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpArtifactUploadsScheduledCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTPARTIFACTUPLOADSSCHEDULEDCOUNT_ISSET_ID);
  }

  public void setHttpArtifactUploadsScheduledCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTPARTIFACTUPLOADSSCHEDULEDCOUNT_ISSET_ID, value);
  }

  public int getHttpArtifactUploadsOngoingCount() {
    return this.httpArtifactUploadsOngoingCount;
  }

  public BuildSlaveStatus setHttpArtifactUploadsOngoingCount(int httpArtifactUploadsOngoingCount) {
    this.httpArtifactUploadsOngoingCount = httpArtifactUploadsOngoingCount;
    setHttpArtifactUploadsOngoingCountIsSet(true);
    return this;
  }

  public void unsetHttpArtifactUploadsOngoingCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTPARTIFACTUPLOADSONGOINGCOUNT_ISSET_ID);
  }

  /** Returns true if field httpArtifactUploadsOngoingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpArtifactUploadsOngoingCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTPARTIFACTUPLOADSONGOINGCOUNT_ISSET_ID);
  }

  public void setHttpArtifactUploadsOngoingCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTPARTIFACTUPLOADSONGOINGCOUNT_ISSET_ID, value);
  }

  public int getHttpArtifactUploadsSuccessCount() {
    return this.httpArtifactUploadsSuccessCount;
  }

  public BuildSlaveStatus setHttpArtifactUploadsSuccessCount(int httpArtifactUploadsSuccessCount) {
    this.httpArtifactUploadsSuccessCount = httpArtifactUploadsSuccessCount;
    setHttpArtifactUploadsSuccessCountIsSet(true);
    return this;
  }

  public void unsetHttpArtifactUploadsSuccessCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTPARTIFACTUPLOADSSUCCESSCOUNT_ISSET_ID);
  }

  /** Returns true if field httpArtifactUploadsSuccessCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpArtifactUploadsSuccessCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTPARTIFACTUPLOADSSUCCESSCOUNT_ISSET_ID);
  }

  public void setHttpArtifactUploadsSuccessCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTPARTIFACTUPLOADSSUCCESSCOUNT_ISSET_ID, value);
  }

  public int getHttpArtifactUploadsFailureCount() {
    return this.httpArtifactUploadsFailureCount;
  }

  public BuildSlaveStatus setHttpArtifactUploadsFailureCount(int httpArtifactUploadsFailureCount) {
    this.httpArtifactUploadsFailureCount = httpArtifactUploadsFailureCount;
    setHttpArtifactUploadsFailureCountIsSet(true);
    return this;
  }

  public void unsetHttpArtifactUploadsFailureCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTPARTIFACTUPLOADSFAILURECOUNT_ISSET_ID);
  }

  /** Returns true if field httpArtifactUploadsFailureCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpArtifactUploadsFailureCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTPARTIFACTUPLOADSFAILURECOUNT_ISSET_ID);
  }

  public void setHttpArtifactUploadsFailureCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTPARTIFACTUPLOADSFAILURECOUNT_ISSET_ID, value);
  }

  public int getFilesMaterializedCount() {
    return this.filesMaterializedCount;
  }

  public BuildSlaveStatus setFilesMaterializedCount(int filesMaterializedCount) {
    this.filesMaterializedCount = filesMaterializedCount;
    setFilesMaterializedCountIsSet(true);
    return this;
  }

  public void unsetFilesMaterializedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILESMATERIALIZEDCOUNT_ISSET_ID);
  }

  /** Returns true if field filesMaterializedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesMaterializedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILESMATERIALIZEDCOUNT_ISSET_ID);
  }

  public void setFilesMaterializedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILESMATERIALIZEDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STAMPEDE_ID:
      if (value == null) {
        unsetStampedeId();
      } else {
        setStampedeId((com.facebook.buck.distributed.thrift.StampedeId)value);
      }
      break;

    case BUILD_SLAVE_RUN_ID:
      if (value == null) {
        unsetBuildSlaveRunId();
      } else {
        setBuildSlaveRunId((com.facebook.buck.distributed.thrift.BuildSlaveRunId)value);
      }
      break;

    case TOTAL_RULES_COUNT:
      if (value == null) {
        unsetTotalRulesCount();
      } else {
        setTotalRulesCount((java.lang.Integer)value);
      }
      break;

    case RULES_BUILDING_COUNT:
      if (value == null) {
        unsetRulesBuildingCount();
      } else {
        setRulesBuildingCount((java.lang.Integer)value);
      }
      break;

    case RULES_FINISHED_COUNT:
      if (value == null) {
        unsetRulesFinishedCount();
      } else {
        setRulesFinishedCount((java.lang.Integer)value);
      }
      break;

    case RULES_FAILURE_COUNT:
      if (value == null) {
        unsetRulesFailureCount();
      } else {
        setRulesFailureCount((java.lang.Integer)value);
      }
      break;

    case CACHE_RATE_STATS:
      if (value == null) {
        unsetCacheRateStats();
      } else {
        setCacheRateStats((CacheRateStats)value);
      }
      break;

    case HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED:
      if (value == null) {
        unsetHttpArtifactTotalBytesUploaded();
      } else {
        setHttpArtifactTotalBytesUploaded((java.lang.Long)value);
      }
      break;

    case HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT:
      if (value == null) {
        unsetHttpArtifactUploadsScheduledCount();
      } else {
        setHttpArtifactUploadsScheduledCount((java.lang.Integer)value);
      }
      break;

    case HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT:
      if (value == null) {
        unsetHttpArtifactUploadsOngoingCount();
      } else {
        setHttpArtifactUploadsOngoingCount((java.lang.Integer)value);
      }
      break;

    case HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT:
      if (value == null) {
        unsetHttpArtifactUploadsSuccessCount();
      } else {
        setHttpArtifactUploadsSuccessCount((java.lang.Integer)value);
      }
      break;

    case HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT:
      if (value == null) {
        unsetHttpArtifactUploadsFailureCount();
      } else {
        setHttpArtifactUploadsFailureCount((java.lang.Integer)value);
      }
      break;

    case FILES_MATERIALIZED_COUNT:
      if (value == null) {
        unsetFilesMaterializedCount();
      } else {
        setFilesMaterializedCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STAMPEDE_ID:
      return getStampedeId();

    case BUILD_SLAVE_RUN_ID:
      return getBuildSlaveRunId();

    case TOTAL_RULES_COUNT:
      return getTotalRulesCount();

    case RULES_BUILDING_COUNT:
      return getRulesBuildingCount();

    case RULES_FINISHED_COUNT:
      return getRulesFinishedCount();

    case RULES_FAILURE_COUNT:
      return getRulesFailureCount();

    case CACHE_RATE_STATS:
      return getCacheRateStats();

    case HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED:
      return getHttpArtifactTotalBytesUploaded();

    case HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT:
      return getHttpArtifactUploadsScheduledCount();

    case HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT:
      return getHttpArtifactUploadsOngoingCount();

    case HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT:
      return getHttpArtifactUploadsSuccessCount();

    case HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT:
      return getHttpArtifactUploadsFailureCount();

    case FILES_MATERIALIZED_COUNT:
      return getFilesMaterializedCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STAMPEDE_ID:
      return isSetStampedeId();
    case BUILD_SLAVE_RUN_ID:
      return isSetBuildSlaveRunId();
    case TOTAL_RULES_COUNT:
      return isSetTotalRulesCount();
    case RULES_BUILDING_COUNT:
      return isSetRulesBuildingCount();
    case RULES_FINISHED_COUNT:
      return isSetRulesFinishedCount();
    case RULES_FAILURE_COUNT:
      return isSetRulesFailureCount();
    case CACHE_RATE_STATS:
      return isSetCacheRateStats();
    case HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED:
      return isSetHttpArtifactTotalBytesUploaded();
    case HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT:
      return isSetHttpArtifactUploadsScheduledCount();
    case HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT:
      return isSetHttpArtifactUploadsOngoingCount();
    case HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT:
      return isSetHttpArtifactUploadsSuccessCount();
    case HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT:
      return isSetHttpArtifactUploadsFailureCount();
    case FILES_MATERIALIZED_COUNT:
      return isSetFilesMaterializedCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuildSlaveStatus)
      return this.equals((BuildSlaveStatus)that);
    return false;
  }

  public boolean equals(BuildSlaveStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stampedeId = true && this.isSetStampedeId();
    boolean that_present_stampedeId = true && that.isSetStampedeId();
    if (this_present_stampedeId || that_present_stampedeId) {
      if (!(this_present_stampedeId && that_present_stampedeId))
        return false;
      if (!this.stampedeId.equals(that.stampedeId))
        return false;
    }

    boolean this_present_buildSlaveRunId = true && this.isSetBuildSlaveRunId();
    boolean that_present_buildSlaveRunId = true && that.isSetBuildSlaveRunId();
    if (this_present_buildSlaveRunId || that_present_buildSlaveRunId) {
      if (!(this_present_buildSlaveRunId && that_present_buildSlaveRunId))
        return false;
      if (!this.buildSlaveRunId.equals(that.buildSlaveRunId))
        return false;
    }

    boolean this_present_totalRulesCount = true && this.isSetTotalRulesCount();
    boolean that_present_totalRulesCount = true && that.isSetTotalRulesCount();
    if (this_present_totalRulesCount || that_present_totalRulesCount) {
      if (!(this_present_totalRulesCount && that_present_totalRulesCount))
        return false;
      if (this.totalRulesCount != that.totalRulesCount)
        return false;
    }

    boolean this_present_rulesBuildingCount = true && this.isSetRulesBuildingCount();
    boolean that_present_rulesBuildingCount = true && that.isSetRulesBuildingCount();
    if (this_present_rulesBuildingCount || that_present_rulesBuildingCount) {
      if (!(this_present_rulesBuildingCount && that_present_rulesBuildingCount))
        return false;
      if (this.rulesBuildingCount != that.rulesBuildingCount)
        return false;
    }

    boolean this_present_rulesFinishedCount = true && this.isSetRulesFinishedCount();
    boolean that_present_rulesFinishedCount = true && that.isSetRulesFinishedCount();
    if (this_present_rulesFinishedCount || that_present_rulesFinishedCount) {
      if (!(this_present_rulesFinishedCount && that_present_rulesFinishedCount))
        return false;
      if (this.rulesFinishedCount != that.rulesFinishedCount)
        return false;
    }

    boolean this_present_rulesFailureCount = true && this.isSetRulesFailureCount();
    boolean that_present_rulesFailureCount = true && that.isSetRulesFailureCount();
    if (this_present_rulesFailureCount || that_present_rulesFailureCount) {
      if (!(this_present_rulesFailureCount && that_present_rulesFailureCount))
        return false;
      if (this.rulesFailureCount != that.rulesFailureCount)
        return false;
    }

    boolean this_present_cacheRateStats = true && this.isSetCacheRateStats();
    boolean that_present_cacheRateStats = true && that.isSetCacheRateStats();
    if (this_present_cacheRateStats || that_present_cacheRateStats) {
      if (!(this_present_cacheRateStats && that_present_cacheRateStats))
        return false;
      if (!this.cacheRateStats.equals(that.cacheRateStats))
        return false;
    }

    boolean this_present_httpArtifactTotalBytesUploaded = true && this.isSetHttpArtifactTotalBytesUploaded();
    boolean that_present_httpArtifactTotalBytesUploaded = true && that.isSetHttpArtifactTotalBytesUploaded();
    if (this_present_httpArtifactTotalBytesUploaded || that_present_httpArtifactTotalBytesUploaded) {
      if (!(this_present_httpArtifactTotalBytesUploaded && that_present_httpArtifactTotalBytesUploaded))
        return false;
      if (this.httpArtifactTotalBytesUploaded != that.httpArtifactTotalBytesUploaded)
        return false;
    }

    boolean this_present_httpArtifactUploadsScheduledCount = true && this.isSetHttpArtifactUploadsScheduledCount();
    boolean that_present_httpArtifactUploadsScheduledCount = true && that.isSetHttpArtifactUploadsScheduledCount();
    if (this_present_httpArtifactUploadsScheduledCount || that_present_httpArtifactUploadsScheduledCount) {
      if (!(this_present_httpArtifactUploadsScheduledCount && that_present_httpArtifactUploadsScheduledCount))
        return false;
      if (this.httpArtifactUploadsScheduledCount != that.httpArtifactUploadsScheduledCount)
        return false;
    }

    boolean this_present_httpArtifactUploadsOngoingCount = true && this.isSetHttpArtifactUploadsOngoingCount();
    boolean that_present_httpArtifactUploadsOngoingCount = true && that.isSetHttpArtifactUploadsOngoingCount();
    if (this_present_httpArtifactUploadsOngoingCount || that_present_httpArtifactUploadsOngoingCount) {
      if (!(this_present_httpArtifactUploadsOngoingCount && that_present_httpArtifactUploadsOngoingCount))
        return false;
      if (this.httpArtifactUploadsOngoingCount != that.httpArtifactUploadsOngoingCount)
        return false;
    }

    boolean this_present_httpArtifactUploadsSuccessCount = true && this.isSetHttpArtifactUploadsSuccessCount();
    boolean that_present_httpArtifactUploadsSuccessCount = true && that.isSetHttpArtifactUploadsSuccessCount();
    if (this_present_httpArtifactUploadsSuccessCount || that_present_httpArtifactUploadsSuccessCount) {
      if (!(this_present_httpArtifactUploadsSuccessCount && that_present_httpArtifactUploadsSuccessCount))
        return false;
      if (this.httpArtifactUploadsSuccessCount != that.httpArtifactUploadsSuccessCount)
        return false;
    }

    boolean this_present_httpArtifactUploadsFailureCount = true && this.isSetHttpArtifactUploadsFailureCount();
    boolean that_present_httpArtifactUploadsFailureCount = true && that.isSetHttpArtifactUploadsFailureCount();
    if (this_present_httpArtifactUploadsFailureCount || that_present_httpArtifactUploadsFailureCount) {
      if (!(this_present_httpArtifactUploadsFailureCount && that_present_httpArtifactUploadsFailureCount))
        return false;
      if (this.httpArtifactUploadsFailureCount != that.httpArtifactUploadsFailureCount)
        return false;
    }

    boolean this_present_filesMaterializedCount = true && this.isSetFilesMaterializedCount();
    boolean that_present_filesMaterializedCount = true && that.isSetFilesMaterializedCount();
    if (this_present_filesMaterializedCount || that_present_filesMaterializedCount) {
      if (!(this_present_filesMaterializedCount && that_present_filesMaterializedCount))
        return false;
      if (this.filesMaterializedCount != that.filesMaterializedCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStampedeId()) ? 131071 : 524287);
    if (isSetStampedeId())
      hashCode = hashCode * 8191 + stampedeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuildSlaveRunId()) ? 131071 : 524287);
    if (isSetBuildSlaveRunId())
      hashCode = hashCode * 8191 + buildSlaveRunId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalRulesCount()) ? 131071 : 524287);
    if (isSetTotalRulesCount())
      hashCode = hashCode * 8191 + totalRulesCount;

    hashCode = hashCode * 8191 + ((isSetRulesBuildingCount()) ? 131071 : 524287);
    if (isSetRulesBuildingCount())
      hashCode = hashCode * 8191 + rulesBuildingCount;

    hashCode = hashCode * 8191 + ((isSetRulesFinishedCount()) ? 131071 : 524287);
    if (isSetRulesFinishedCount())
      hashCode = hashCode * 8191 + rulesFinishedCount;

    hashCode = hashCode * 8191 + ((isSetRulesFailureCount()) ? 131071 : 524287);
    if (isSetRulesFailureCount())
      hashCode = hashCode * 8191 + rulesFailureCount;

    hashCode = hashCode * 8191 + ((isSetCacheRateStats()) ? 131071 : 524287);
    if (isSetCacheRateStats())
      hashCode = hashCode * 8191 + cacheRateStats.hashCode();

    hashCode = hashCode * 8191 + ((isSetHttpArtifactTotalBytesUploaded()) ? 131071 : 524287);
    if (isSetHttpArtifactTotalBytesUploaded())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(httpArtifactTotalBytesUploaded);

    hashCode = hashCode * 8191 + ((isSetHttpArtifactUploadsScheduledCount()) ? 131071 : 524287);
    if (isSetHttpArtifactUploadsScheduledCount())
      hashCode = hashCode * 8191 + httpArtifactUploadsScheduledCount;

    hashCode = hashCode * 8191 + ((isSetHttpArtifactUploadsOngoingCount()) ? 131071 : 524287);
    if (isSetHttpArtifactUploadsOngoingCount())
      hashCode = hashCode * 8191 + httpArtifactUploadsOngoingCount;

    hashCode = hashCode * 8191 + ((isSetHttpArtifactUploadsSuccessCount()) ? 131071 : 524287);
    if (isSetHttpArtifactUploadsSuccessCount())
      hashCode = hashCode * 8191 + httpArtifactUploadsSuccessCount;

    hashCode = hashCode * 8191 + ((isSetHttpArtifactUploadsFailureCount()) ? 131071 : 524287);
    if (isSetHttpArtifactUploadsFailureCount())
      hashCode = hashCode * 8191 + httpArtifactUploadsFailureCount;

    hashCode = hashCode * 8191 + ((isSetFilesMaterializedCount()) ? 131071 : 524287);
    if (isSetFilesMaterializedCount())
      hashCode = hashCode * 8191 + filesMaterializedCount;

    return hashCode;
  }

  @Override
  public int compareTo(BuildSlaveStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStampedeId()).compareTo(other.isSetStampedeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStampedeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stampedeId, other.stampedeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuildSlaveRunId()).compareTo(other.isSetBuildSlaveRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildSlaveRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildSlaveRunId, other.buildSlaveRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalRulesCount()).compareTo(other.isSetTotalRulesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRulesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRulesCount, other.totalRulesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRulesBuildingCount()).compareTo(other.isSetRulesBuildingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRulesBuildingCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rulesBuildingCount, other.rulesBuildingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRulesFinishedCount()).compareTo(other.isSetRulesFinishedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRulesFinishedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rulesFinishedCount, other.rulesFinishedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRulesFailureCount()).compareTo(other.isSetRulesFailureCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRulesFailureCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rulesFailureCount, other.rulesFailureCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheRateStats()).compareTo(other.isSetCacheRateStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheRateStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheRateStats, other.cacheRateStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHttpArtifactTotalBytesUploaded()).compareTo(other.isSetHttpArtifactTotalBytesUploaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpArtifactTotalBytesUploaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpArtifactTotalBytesUploaded, other.httpArtifactTotalBytesUploaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHttpArtifactUploadsScheduledCount()).compareTo(other.isSetHttpArtifactUploadsScheduledCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpArtifactUploadsScheduledCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpArtifactUploadsScheduledCount, other.httpArtifactUploadsScheduledCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHttpArtifactUploadsOngoingCount()).compareTo(other.isSetHttpArtifactUploadsOngoingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpArtifactUploadsOngoingCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpArtifactUploadsOngoingCount, other.httpArtifactUploadsOngoingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHttpArtifactUploadsSuccessCount()).compareTo(other.isSetHttpArtifactUploadsSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpArtifactUploadsSuccessCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpArtifactUploadsSuccessCount, other.httpArtifactUploadsSuccessCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHttpArtifactUploadsFailureCount()).compareTo(other.isSetHttpArtifactUploadsFailureCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpArtifactUploadsFailureCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpArtifactUploadsFailureCount, other.httpArtifactUploadsFailureCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFilesMaterializedCount()).compareTo(other.isSetFilesMaterializedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesMaterializedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesMaterializedCount, other.filesMaterializedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuildSlaveStatus(");
    boolean first = true;

    if (isSetStampedeId()) {
      sb.append("stampedeId:");
      if (this.stampedeId == null) {
        sb.append("null");
      } else {
        sb.append(this.stampedeId);
      }
      first = false;
    }
    if (isSetBuildSlaveRunId()) {
      if (!first) sb.append(", ");
      sb.append("buildSlaveRunId:");
      if (this.buildSlaveRunId == null) {
        sb.append("null");
      } else {
        sb.append(this.buildSlaveRunId);
      }
      first = false;
    }
    if (isSetTotalRulesCount()) {
      if (!first) sb.append(", ");
      sb.append("totalRulesCount:");
      sb.append(this.totalRulesCount);
      first = false;
    }
    if (isSetRulesBuildingCount()) {
      if (!first) sb.append(", ");
      sb.append("rulesBuildingCount:");
      sb.append(this.rulesBuildingCount);
      first = false;
    }
    if (isSetRulesFinishedCount()) {
      if (!first) sb.append(", ");
      sb.append("rulesFinishedCount:");
      sb.append(this.rulesFinishedCount);
      first = false;
    }
    if (isSetRulesFailureCount()) {
      if (!first) sb.append(", ");
      sb.append("rulesFailureCount:");
      sb.append(this.rulesFailureCount);
      first = false;
    }
    if (isSetCacheRateStats()) {
      if (!first) sb.append(", ");
      sb.append("cacheRateStats:");
      if (this.cacheRateStats == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheRateStats);
      }
      first = false;
    }
    if (isSetHttpArtifactTotalBytesUploaded()) {
      if (!first) sb.append(", ");
      sb.append("httpArtifactTotalBytesUploaded:");
      sb.append(this.httpArtifactTotalBytesUploaded);
      first = false;
    }
    if (isSetHttpArtifactUploadsScheduledCount()) {
      if (!first) sb.append(", ");
      sb.append("httpArtifactUploadsScheduledCount:");
      sb.append(this.httpArtifactUploadsScheduledCount);
      first = false;
    }
    if (isSetHttpArtifactUploadsOngoingCount()) {
      if (!first) sb.append(", ");
      sb.append("httpArtifactUploadsOngoingCount:");
      sb.append(this.httpArtifactUploadsOngoingCount);
      first = false;
    }
    if (isSetHttpArtifactUploadsSuccessCount()) {
      if (!first) sb.append(", ");
      sb.append("httpArtifactUploadsSuccessCount:");
      sb.append(this.httpArtifactUploadsSuccessCount);
      first = false;
    }
    if (isSetHttpArtifactUploadsFailureCount()) {
      if (!first) sb.append(", ");
      sb.append("httpArtifactUploadsFailureCount:");
      sb.append(this.httpArtifactUploadsFailureCount);
      first = false;
    }
    if (isSetFilesMaterializedCount()) {
      if (!first) sb.append(", ");
      sb.append("filesMaterializedCount:");
      sb.append(this.filesMaterializedCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stampedeId != null) {
      stampedeId.validate();
    }
    if (buildSlaveRunId != null) {
      buildSlaveRunId.validate();
    }
    if (cacheRateStats != null) {
      cacheRateStats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuildSlaveStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildSlaveStatusStandardScheme getScheme() {
      return new BuildSlaveStatusStandardScheme();
    }
  }

  private static class BuildSlaveStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuildSlaveStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuildSlaveStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAMPEDE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stampedeId = new com.facebook.buck.distributed.thrift.StampedeId();
              struct.stampedeId.read(iprot);
              struct.setStampedeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUILD_SLAVE_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buildSlaveRunId = new com.facebook.buck.distributed.thrift.BuildSlaveRunId();
              struct.buildSlaveRunId.read(iprot);
              struct.setBuildSlaveRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_RULES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalRulesCount = iprot.readI32();
              struct.setTotalRulesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RULES_BUILDING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rulesBuildingCount = iprot.readI32();
              struct.setRulesBuildingCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RULES_FINISHED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rulesFinishedCount = iprot.readI32();
              struct.setRulesFinishedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RULES_FAILURE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rulesFailureCount = iprot.readI32();
              struct.setRulesFailureCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CACHE_RATE_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cacheRateStats = new CacheRateStats();
              struct.cacheRateStats.read(iprot);
              struct.setCacheRateStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.httpArtifactTotalBytesUploaded = iprot.readI64();
              struct.setHttpArtifactTotalBytesUploadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.httpArtifactUploadsScheduledCount = iprot.readI32();
              struct.setHttpArtifactUploadsScheduledCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.httpArtifactUploadsOngoingCount = iprot.readI32();
              struct.setHttpArtifactUploadsOngoingCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.httpArtifactUploadsSuccessCount = iprot.readI32();
              struct.setHttpArtifactUploadsSuccessCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.httpArtifactUploadsFailureCount = iprot.readI32();
              struct.setHttpArtifactUploadsFailureCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FILES_MATERIALIZED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filesMaterializedCount = iprot.readI32();
              struct.setFilesMaterializedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuildSlaveStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stampedeId != null) {
        if (struct.isSetStampedeId()) {
          oprot.writeFieldBegin(STAMPEDE_ID_FIELD_DESC);
          struct.stampedeId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildSlaveRunId != null) {
        if (struct.isSetBuildSlaveRunId()) {
          oprot.writeFieldBegin(BUILD_SLAVE_RUN_ID_FIELD_DESC);
          struct.buildSlaveRunId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalRulesCount()) {
        oprot.writeFieldBegin(TOTAL_RULES_COUNT_FIELD_DESC);
        oprot.writeI32(struct.totalRulesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRulesBuildingCount()) {
        oprot.writeFieldBegin(RULES_BUILDING_COUNT_FIELD_DESC);
        oprot.writeI32(struct.rulesBuildingCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRulesFinishedCount()) {
        oprot.writeFieldBegin(RULES_FINISHED_COUNT_FIELD_DESC);
        oprot.writeI32(struct.rulesFinishedCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRulesFailureCount()) {
        oprot.writeFieldBegin(RULES_FAILURE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.rulesFailureCount);
        oprot.writeFieldEnd();
      }
      if (struct.cacheRateStats != null) {
        if (struct.isSetCacheRateStats()) {
          oprot.writeFieldBegin(CACHE_RATE_STATS_FIELD_DESC);
          struct.cacheRateStats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHttpArtifactTotalBytesUploaded()) {
        oprot.writeFieldBegin(HTTP_ARTIFACT_TOTAL_BYTES_UPLOADED_FIELD_DESC);
        oprot.writeI64(struct.httpArtifactTotalBytesUploaded);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHttpArtifactUploadsScheduledCount()) {
        oprot.writeFieldBegin(HTTP_ARTIFACT_UPLOADS_SCHEDULED_COUNT_FIELD_DESC);
        oprot.writeI32(struct.httpArtifactUploadsScheduledCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHttpArtifactUploadsOngoingCount()) {
        oprot.writeFieldBegin(HTTP_ARTIFACT_UPLOADS_ONGOING_COUNT_FIELD_DESC);
        oprot.writeI32(struct.httpArtifactUploadsOngoingCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHttpArtifactUploadsSuccessCount()) {
        oprot.writeFieldBegin(HTTP_ARTIFACT_UPLOADS_SUCCESS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.httpArtifactUploadsSuccessCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHttpArtifactUploadsFailureCount()) {
        oprot.writeFieldBegin(HTTP_ARTIFACT_UPLOADS_FAILURE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.httpArtifactUploadsFailureCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFilesMaterializedCount()) {
        oprot.writeFieldBegin(FILES_MATERIALIZED_COUNT_FIELD_DESC);
        oprot.writeI32(struct.filesMaterializedCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuildSlaveStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildSlaveStatusTupleScheme getScheme() {
      return new BuildSlaveStatusTupleScheme();
    }
  }

  private static class BuildSlaveStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuildSlaveStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuildSlaveStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStampedeId()) {
        optionals.set(0);
      }
      if (struct.isSetBuildSlaveRunId()) {
        optionals.set(1);
      }
      if (struct.isSetTotalRulesCount()) {
        optionals.set(2);
      }
      if (struct.isSetRulesBuildingCount()) {
        optionals.set(3);
      }
      if (struct.isSetRulesFinishedCount()) {
        optionals.set(4);
      }
      if (struct.isSetRulesFailureCount()) {
        optionals.set(5);
      }
      if (struct.isSetCacheRateStats()) {
        optionals.set(6);
      }
      if (struct.isSetHttpArtifactTotalBytesUploaded()) {
        optionals.set(7);
      }
      if (struct.isSetHttpArtifactUploadsScheduledCount()) {
        optionals.set(8);
      }
      if (struct.isSetHttpArtifactUploadsOngoingCount()) {
        optionals.set(9);
      }
      if (struct.isSetHttpArtifactUploadsSuccessCount()) {
        optionals.set(10);
      }
      if (struct.isSetHttpArtifactUploadsFailureCount()) {
        optionals.set(11);
      }
      if (struct.isSetFilesMaterializedCount()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetStampedeId()) {
        struct.stampedeId.write(oprot);
      }
      if (struct.isSetBuildSlaveRunId()) {
        struct.buildSlaveRunId.write(oprot);
      }
      if (struct.isSetTotalRulesCount()) {
        oprot.writeI32(struct.totalRulesCount);
      }
      if (struct.isSetRulesBuildingCount()) {
        oprot.writeI32(struct.rulesBuildingCount);
      }
      if (struct.isSetRulesFinishedCount()) {
        oprot.writeI32(struct.rulesFinishedCount);
      }
      if (struct.isSetRulesFailureCount()) {
        oprot.writeI32(struct.rulesFailureCount);
      }
      if (struct.isSetCacheRateStats()) {
        struct.cacheRateStats.write(oprot);
      }
      if (struct.isSetHttpArtifactTotalBytesUploaded()) {
        oprot.writeI64(struct.httpArtifactTotalBytesUploaded);
      }
      if (struct.isSetHttpArtifactUploadsScheduledCount()) {
        oprot.writeI32(struct.httpArtifactUploadsScheduledCount);
      }
      if (struct.isSetHttpArtifactUploadsOngoingCount()) {
        oprot.writeI32(struct.httpArtifactUploadsOngoingCount);
      }
      if (struct.isSetHttpArtifactUploadsSuccessCount()) {
        oprot.writeI32(struct.httpArtifactUploadsSuccessCount);
      }
      if (struct.isSetHttpArtifactUploadsFailureCount()) {
        oprot.writeI32(struct.httpArtifactUploadsFailureCount);
      }
      if (struct.isSetFilesMaterializedCount()) {
        oprot.writeI32(struct.filesMaterializedCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuildSlaveStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.stampedeId = new com.facebook.buck.distributed.thrift.StampedeId();
        struct.stampedeId.read(iprot);
        struct.setStampedeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buildSlaveRunId = new com.facebook.buck.distributed.thrift.BuildSlaveRunId();
        struct.buildSlaveRunId.read(iprot);
        struct.setBuildSlaveRunIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalRulesCount = iprot.readI32();
        struct.setTotalRulesCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rulesBuildingCount = iprot.readI32();
        struct.setRulesBuildingCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rulesFinishedCount = iprot.readI32();
        struct.setRulesFinishedCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rulesFailureCount = iprot.readI32();
        struct.setRulesFailureCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cacheRateStats = new CacheRateStats();
        struct.cacheRateStats.read(iprot);
        struct.setCacheRateStatsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.httpArtifactTotalBytesUploaded = iprot.readI64();
        struct.setHttpArtifactTotalBytesUploadedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.httpArtifactUploadsScheduledCount = iprot.readI32();
        struct.setHttpArtifactUploadsScheduledCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.httpArtifactUploadsOngoingCount = iprot.readI32();
        struct.setHttpArtifactUploadsOngoingCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.httpArtifactUploadsSuccessCount = iprot.readI32();
        struct.setHttpArtifactUploadsSuccessCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.httpArtifactUploadsFailureCount = iprot.readI32();
        struct.setHttpArtifactUploadsFailureCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.filesMaterializedCount = iprot.readI32();
        struct.setFilesMaterializedCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


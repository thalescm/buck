/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-01-25")
public class HealthCheckStats implements org.apache.thrift.TBase<HealthCheckStats, HealthCheckStats._Fields>, java.io.Serializable, Cloneable, Comparable<HealthCheckStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HealthCheckStats");

  private static final org.apache.thrift.protocol.TField SLOW_HEARTBEATS_RECEIVED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("slowHeartbeatsReceivedCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEARTBEATS_RECEIVED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeatsReceivedCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AVERAGE_HEARTBEAT_INTERVAL_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("averageHeartbeatIntervalMillis", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SLOWEST_HEARTBEAT_INTERVAL_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("slowestHeartbeatIntervalMillis", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SLOWEST_HEARTBEAT_MINION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slowestHeartbeatMinionId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SLOW_DEAD_MINION_CHECKS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("slowDeadMinionChecksCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("slowestDeadMinionCheckIntervalMillis", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HealthCheckStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HealthCheckStatsTupleSchemeFactory());
  }

  public int slowHeartbeatsReceivedCount; // optional
  public int heartbeatsReceivedCount; // optional
  public long averageHeartbeatIntervalMillis; // optional
  public long slowestHeartbeatIntervalMillis; // optional
  public String slowestHeartbeatMinionId; // optional
  public int slowDeadMinionChecksCount; // optional
  public long slowestDeadMinionCheckIntervalMillis; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLOW_HEARTBEATS_RECEIVED_COUNT((short)1, "slowHeartbeatsReceivedCount"),
    HEARTBEATS_RECEIVED_COUNT((short)2, "heartbeatsReceivedCount"),
    AVERAGE_HEARTBEAT_INTERVAL_MILLIS((short)3, "averageHeartbeatIntervalMillis"),
    SLOWEST_HEARTBEAT_INTERVAL_MILLIS((short)4, "slowestHeartbeatIntervalMillis"),
    SLOWEST_HEARTBEAT_MINION_ID((short)5, "slowestHeartbeatMinionId"),
    SLOW_DEAD_MINION_CHECKS_COUNT((short)6, "slowDeadMinionChecksCount"),
    SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS((short)7, "slowestDeadMinionCheckIntervalMillis");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLOW_HEARTBEATS_RECEIVED_COUNT
          return SLOW_HEARTBEATS_RECEIVED_COUNT;
        case 2: // HEARTBEATS_RECEIVED_COUNT
          return HEARTBEATS_RECEIVED_COUNT;
        case 3: // AVERAGE_HEARTBEAT_INTERVAL_MILLIS
          return AVERAGE_HEARTBEAT_INTERVAL_MILLIS;
        case 4: // SLOWEST_HEARTBEAT_INTERVAL_MILLIS
          return SLOWEST_HEARTBEAT_INTERVAL_MILLIS;
        case 5: // SLOWEST_HEARTBEAT_MINION_ID
          return SLOWEST_HEARTBEAT_MINION_ID;
        case 6: // SLOW_DEAD_MINION_CHECKS_COUNT
          return SLOW_DEAD_MINION_CHECKS_COUNT;
        case 7: // SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS
          return SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLOWHEARTBEATSRECEIVEDCOUNT_ISSET_ID = 0;
  private static final int __HEARTBEATSRECEIVEDCOUNT_ISSET_ID = 1;
  private static final int __AVERAGEHEARTBEATINTERVALMILLIS_ISSET_ID = 2;
  private static final int __SLOWESTHEARTBEATINTERVALMILLIS_ISSET_ID = 3;
  private static final int __SLOWDEADMINIONCHECKSCOUNT_ISSET_ID = 4;
  private static final int __SLOWESTDEADMINIONCHECKINTERVALMILLIS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SLOW_HEARTBEATS_RECEIVED_COUNT,_Fields.HEARTBEATS_RECEIVED_COUNT,_Fields.AVERAGE_HEARTBEAT_INTERVAL_MILLIS,_Fields.SLOWEST_HEARTBEAT_INTERVAL_MILLIS,_Fields.SLOWEST_HEARTBEAT_MINION_ID,_Fields.SLOW_DEAD_MINION_CHECKS_COUNT,_Fields.SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLOW_HEARTBEATS_RECEIVED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("slowHeartbeatsReceivedCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEARTBEATS_RECEIVED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("heartbeatsReceivedCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVERAGE_HEARTBEAT_INTERVAL_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("averageHeartbeatIntervalMillis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLOWEST_HEARTBEAT_INTERVAL_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("slowestHeartbeatIntervalMillis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLOWEST_HEARTBEAT_MINION_ID, new org.apache.thrift.meta_data.FieldMetaData("slowestHeartbeatMinionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLOW_DEAD_MINION_CHECKS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("slowDeadMinionChecksCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("slowestDeadMinionCheckIntervalMillis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HealthCheckStats.class, metaDataMap);
  }

  public HealthCheckStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HealthCheckStats(HealthCheckStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.slowHeartbeatsReceivedCount = other.slowHeartbeatsReceivedCount;
    this.heartbeatsReceivedCount = other.heartbeatsReceivedCount;
    this.averageHeartbeatIntervalMillis = other.averageHeartbeatIntervalMillis;
    this.slowestHeartbeatIntervalMillis = other.slowestHeartbeatIntervalMillis;
    if (other.isSetSlowestHeartbeatMinionId()) {
      this.slowestHeartbeatMinionId = other.slowestHeartbeatMinionId;
    }
    this.slowDeadMinionChecksCount = other.slowDeadMinionChecksCount;
    this.slowestDeadMinionCheckIntervalMillis = other.slowestDeadMinionCheckIntervalMillis;
  }

  public HealthCheckStats deepCopy() {
    return new HealthCheckStats(this);
  }

  @Override
  public void clear() {
    setSlowHeartbeatsReceivedCountIsSet(false);
    this.slowHeartbeatsReceivedCount = 0;
    setHeartbeatsReceivedCountIsSet(false);
    this.heartbeatsReceivedCount = 0;
    setAverageHeartbeatIntervalMillisIsSet(false);
    this.averageHeartbeatIntervalMillis = 0;
    setSlowestHeartbeatIntervalMillisIsSet(false);
    this.slowestHeartbeatIntervalMillis = 0;
    this.slowestHeartbeatMinionId = null;
    setSlowDeadMinionChecksCountIsSet(false);
    this.slowDeadMinionChecksCount = 0;
    setSlowestDeadMinionCheckIntervalMillisIsSet(false);
    this.slowestDeadMinionCheckIntervalMillis = 0;
  }

  public int getSlowHeartbeatsReceivedCount() {
    return this.slowHeartbeatsReceivedCount;
  }

  public HealthCheckStats setSlowHeartbeatsReceivedCount(int slowHeartbeatsReceivedCount) {
    this.slowHeartbeatsReceivedCount = slowHeartbeatsReceivedCount;
    setSlowHeartbeatsReceivedCountIsSet(true);
    return this;
  }

  public void unsetSlowHeartbeatsReceivedCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOWHEARTBEATSRECEIVEDCOUNT_ISSET_ID);
  }

  /** Returns true if field slowHeartbeatsReceivedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSlowHeartbeatsReceivedCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SLOWHEARTBEATSRECEIVEDCOUNT_ISSET_ID);
  }

  public void setSlowHeartbeatsReceivedCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOWHEARTBEATSRECEIVEDCOUNT_ISSET_ID, value);
  }

  public int getHeartbeatsReceivedCount() {
    return this.heartbeatsReceivedCount;
  }

  public HealthCheckStats setHeartbeatsReceivedCount(int heartbeatsReceivedCount) {
    this.heartbeatsReceivedCount = heartbeatsReceivedCount;
    setHeartbeatsReceivedCountIsSet(true);
    return this;
  }

  public void unsetHeartbeatsReceivedCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTBEATSRECEIVEDCOUNT_ISSET_ID);
  }

  /** Returns true if field heartbeatsReceivedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeatsReceivedCount() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTBEATSRECEIVEDCOUNT_ISSET_ID);
  }

  public void setHeartbeatsReceivedCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTBEATSRECEIVEDCOUNT_ISSET_ID, value);
  }

  public long getAverageHeartbeatIntervalMillis() {
    return this.averageHeartbeatIntervalMillis;
  }

  public HealthCheckStats setAverageHeartbeatIntervalMillis(long averageHeartbeatIntervalMillis) {
    this.averageHeartbeatIntervalMillis = averageHeartbeatIntervalMillis;
    setAverageHeartbeatIntervalMillisIsSet(true);
    return this;
  }

  public void unsetAverageHeartbeatIntervalMillis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEHEARTBEATINTERVALMILLIS_ISSET_ID);
  }

  /** Returns true if field averageHeartbeatIntervalMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageHeartbeatIntervalMillis() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEHEARTBEATINTERVALMILLIS_ISSET_ID);
  }

  public void setAverageHeartbeatIntervalMillisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEHEARTBEATINTERVALMILLIS_ISSET_ID, value);
  }

  public long getSlowestHeartbeatIntervalMillis() {
    return this.slowestHeartbeatIntervalMillis;
  }

  public HealthCheckStats setSlowestHeartbeatIntervalMillis(long slowestHeartbeatIntervalMillis) {
    this.slowestHeartbeatIntervalMillis = slowestHeartbeatIntervalMillis;
    setSlowestHeartbeatIntervalMillisIsSet(true);
    return this;
  }

  public void unsetSlowestHeartbeatIntervalMillis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOWESTHEARTBEATINTERVALMILLIS_ISSET_ID);
  }

  /** Returns true if field slowestHeartbeatIntervalMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetSlowestHeartbeatIntervalMillis() {
    return EncodingUtils.testBit(__isset_bitfield, __SLOWESTHEARTBEATINTERVALMILLIS_ISSET_ID);
  }

  public void setSlowestHeartbeatIntervalMillisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOWESTHEARTBEATINTERVALMILLIS_ISSET_ID, value);
  }

  public String getSlowestHeartbeatMinionId() {
    return this.slowestHeartbeatMinionId;
  }

  public HealthCheckStats setSlowestHeartbeatMinionId(String slowestHeartbeatMinionId) {
    this.slowestHeartbeatMinionId = slowestHeartbeatMinionId;
    return this;
  }

  public void unsetSlowestHeartbeatMinionId() {
    this.slowestHeartbeatMinionId = null;
  }

  /** Returns true if field slowestHeartbeatMinionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSlowestHeartbeatMinionId() {
    return this.slowestHeartbeatMinionId != null;
  }

  public void setSlowestHeartbeatMinionIdIsSet(boolean value) {
    if (!value) {
      this.slowestHeartbeatMinionId = null;
    }
  }

  public int getSlowDeadMinionChecksCount() {
    return this.slowDeadMinionChecksCount;
  }

  public HealthCheckStats setSlowDeadMinionChecksCount(int slowDeadMinionChecksCount) {
    this.slowDeadMinionChecksCount = slowDeadMinionChecksCount;
    setSlowDeadMinionChecksCountIsSet(true);
    return this;
  }

  public void unsetSlowDeadMinionChecksCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOWDEADMINIONCHECKSCOUNT_ISSET_ID);
  }

  /** Returns true if field slowDeadMinionChecksCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSlowDeadMinionChecksCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SLOWDEADMINIONCHECKSCOUNT_ISSET_ID);
  }

  public void setSlowDeadMinionChecksCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOWDEADMINIONCHECKSCOUNT_ISSET_ID, value);
  }

  public long getSlowestDeadMinionCheckIntervalMillis() {
    return this.slowestDeadMinionCheckIntervalMillis;
  }

  public HealthCheckStats setSlowestDeadMinionCheckIntervalMillis(long slowestDeadMinionCheckIntervalMillis) {
    this.slowestDeadMinionCheckIntervalMillis = slowestDeadMinionCheckIntervalMillis;
    setSlowestDeadMinionCheckIntervalMillisIsSet(true);
    return this;
  }

  public void unsetSlowestDeadMinionCheckIntervalMillis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOWESTDEADMINIONCHECKINTERVALMILLIS_ISSET_ID);
  }

  /** Returns true if field slowestDeadMinionCheckIntervalMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetSlowestDeadMinionCheckIntervalMillis() {
    return EncodingUtils.testBit(__isset_bitfield, __SLOWESTDEADMINIONCHECKINTERVALMILLIS_ISSET_ID);
  }

  public void setSlowestDeadMinionCheckIntervalMillisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOWESTDEADMINIONCHECKINTERVALMILLIS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLOW_HEARTBEATS_RECEIVED_COUNT:
      if (value == null) {
        unsetSlowHeartbeatsReceivedCount();
      } else {
        setSlowHeartbeatsReceivedCount((Integer)value);
      }
      break;

    case HEARTBEATS_RECEIVED_COUNT:
      if (value == null) {
        unsetHeartbeatsReceivedCount();
      } else {
        setHeartbeatsReceivedCount((Integer)value);
      }
      break;

    case AVERAGE_HEARTBEAT_INTERVAL_MILLIS:
      if (value == null) {
        unsetAverageHeartbeatIntervalMillis();
      } else {
        setAverageHeartbeatIntervalMillis((Long)value);
      }
      break;

    case SLOWEST_HEARTBEAT_INTERVAL_MILLIS:
      if (value == null) {
        unsetSlowestHeartbeatIntervalMillis();
      } else {
        setSlowestHeartbeatIntervalMillis((Long)value);
      }
      break;

    case SLOWEST_HEARTBEAT_MINION_ID:
      if (value == null) {
        unsetSlowestHeartbeatMinionId();
      } else {
        setSlowestHeartbeatMinionId((String)value);
      }
      break;

    case SLOW_DEAD_MINION_CHECKS_COUNT:
      if (value == null) {
        unsetSlowDeadMinionChecksCount();
      } else {
        setSlowDeadMinionChecksCount((Integer)value);
      }
      break;

    case SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS:
      if (value == null) {
        unsetSlowestDeadMinionCheckIntervalMillis();
      } else {
        setSlowestDeadMinionCheckIntervalMillis((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLOW_HEARTBEATS_RECEIVED_COUNT:
      return getSlowHeartbeatsReceivedCount();

    case HEARTBEATS_RECEIVED_COUNT:
      return getHeartbeatsReceivedCount();

    case AVERAGE_HEARTBEAT_INTERVAL_MILLIS:
      return getAverageHeartbeatIntervalMillis();

    case SLOWEST_HEARTBEAT_INTERVAL_MILLIS:
      return getSlowestHeartbeatIntervalMillis();

    case SLOWEST_HEARTBEAT_MINION_ID:
      return getSlowestHeartbeatMinionId();

    case SLOW_DEAD_MINION_CHECKS_COUNT:
      return getSlowDeadMinionChecksCount();

    case SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS:
      return getSlowestDeadMinionCheckIntervalMillis();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLOW_HEARTBEATS_RECEIVED_COUNT:
      return isSetSlowHeartbeatsReceivedCount();
    case HEARTBEATS_RECEIVED_COUNT:
      return isSetHeartbeatsReceivedCount();
    case AVERAGE_HEARTBEAT_INTERVAL_MILLIS:
      return isSetAverageHeartbeatIntervalMillis();
    case SLOWEST_HEARTBEAT_INTERVAL_MILLIS:
      return isSetSlowestHeartbeatIntervalMillis();
    case SLOWEST_HEARTBEAT_MINION_ID:
      return isSetSlowestHeartbeatMinionId();
    case SLOW_DEAD_MINION_CHECKS_COUNT:
      return isSetSlowDeadMinionChecksCount();
    case SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS:
      return isSetSlowestDeadMinionCheckIntervalMillis();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HealthCheckStats)
      return this.equals((HealthCheckStats)that);
    return false;
  }

  public boolean equals(HealthCheckStats that) {
    if (that == null)
      return false;

    boolean this_present_slowHeartbeatsReceivedCount = true && this.isSetSlowHeartbeatsReceivedCount();
    boolean that_present_slowHeartbeatsReceivedCount = true && that.isSetSlowHeartbeatsReceivedCount();
    if (this_present_slowHeartbeatsReceivedCount || that_present_slowHeartbeatsReceivedCount) {
      if (!(this_present_slowHeartbeatsReceivedCount && that_present_slowHeartbeatsReceivedCount))
        return false;
      if (this.slowHeartbeatsReceivedCount != that.slowHeartbeatsReceivedCount)
        return false;
    }

    boolean this_present_heartbeatsReceivedCount = true && this.isSetHeartbeatsReceivedCount();
    boolean that_present_heartbeatsReceivedCount = true && that.isSetHeartbeatsReceivedCount();
    if (this_present_heartbeatsReceivedCount || that_present_heartbeatsReceivedCount) {
      if (!(this_present_heartbeatsReceivedCount && that_present_heartbeatsReceivedCount))
        return false;
      if (this.heartbeatsReceivedCount != that.heartbeatsReceivedCount)
        return false;
    }

    boolean this_present_averageHeartbeatIntervalMillis = true && this.isSetAverageHeartbeatIntervalMillis();
    boolean that_present_averageHeartbeatIntervalMillis = true && that.isSetAverageHeartbeatIntervalMillis();
    if (this_present_averageHeartbeatIntervalMillis || that_present_averageHeartbeatIntervalMillis) {
      if (!(this_present_averageHeartbeatIntervalMillis && that_present_averageHeartbeatIntervalMillis))
        return false;
      if (this.averageHeartbeatIntervalMillis != that.averageHeartbeatIntervalMillis)
        return false;
    }

    boolean this_present_slowestHeartbeatIntervalMillis = true && this.isSetSlowestHeartbeatIntervalMillis();
    boolean that_present_slowestHeartbeatIntervalMillis = true && that.isSetSlowestHeartbeatIntervalMillis();
    if (this_present_slowestHeartbeatIntervalMillis || that_present_slowestHeartbeatIntervalMillis) {
      if (!(this_present_slowestHeartbeatIntervalMillis && that_present_slowestHeartbeatIntervalMillis))
        return false;
      if (this.slowestHeartbeatIntervalMillis != that.slowestHeartbeatIntervalMillis)
        return false;
    }

    boolean this_present_slowestHeartbeatMinionId = true && this.isSetSlowestHeartbeatMinionId();
    boolean that_present_slowestHeartbeatMinionId = true && that.isSetSlowestHeartbeatMinionId();
    if (this_present_slowestHeartbeatMinionId || that_present_slowestHeartbeatMinionId) {
      if (!(this_present_slowestHeartbeatMinionId && that_present_slowestHeartbeatMinionId))
        return false;
      if (!this.slowestHeartbeatMinionId.equals(that.slowestHeartbeatMinionId))
        return false;
    }

    boolean this_present_slowDeadMinionChecksCount = true && this.isSetSlowDeadMinionChecksCount();
    boolean that_present_slowDeadMinionChecksCount = true && that.isSetSlowDeadMinionChecksCount();
    if (this_present_slowDeadMinionChecksCount || that_present_slowDeadMinionChecksCount) {
      if (!(this_present_slowDeadMinionChecksCount && that_present_slowDeadMinionChecksCount))
        return false;
      if (this.slowDeadMinionChecksCount != that.slowDeadMinionChecksCount)
        return false;
    }

    boolean this_present_slowestDeadMinionCheckIntervalMillis = true && this.isSetSlowestDeadMinionCheckIntervalMillis();
    boolean that_present_slowestDeadMinionCheckIntervalMillis = true && that.isSetSlowestDeadMinionCheckIntervalMillis();
    if (this_present_slowestDeadMinionCheckIntervalMillis || that_present_slowestDeadMinionCheckIntervalMillis) {
      if (!(this_present_slowestDeadMinionCheckIntervalMillis && that_present_slowestDeadMinionCheckIntervalMillis))
        return false;
      if (this.slowestDeadMinionCheckIntervalMillis != that.slowestDeadMinionCheckIntervalMillis)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_slowHeartbeatsReceivedCount = true && (isSetSlowHeartbeatsReceivedCount());
    list.add(present_slowHeartbeatsReceivedCount);
    if (present_slowHeartbeatsReceivedCount)
      list.add(slowHeartbeatsReceivedCount);

    boolean present_heartbeatsReceivedCount = true && (isSetHeartbeatsReceivedCount());
    list.add(present_heartbeatsReceivedCount);
    if (present_heartbeatsReceivedCount)
      list.add(heartbeatsReceivedCount);

    boolean present_averageHeartbeatIntervalMillis = true && (isSetAverageHeartbeatIntervalMillis());
    list.add(present_averageHeartbeatIntervalMillis);
    if (present_averageHeartbeatIntervalMillis)
      list.add(averageHeartbeatIntervalMillis);

    boolean present_slowestHeartbeatIntervalMillis = true && (isSetSlowestHeartbeatIntervalMillis());
    list.add(present_slowestHeartbeatIntervalMillis);
    if (present_slowestHeartbeatIntervalMillis)
      list.add(slowestHeartbeatIntervalMillis);

    boolean present_slowestHeartbeatMinionId = true && (isSetSlowestHeartbeatMinionId());
    list.add(present_slowestHeartbeatMinionId);
    if (present_slowestHeartbeatMinionId)
      list.add(slowestHeartbeatMinionId);

    boolean present_slowDeadMinionChecksCount = true && (isSetSlowDeadMinionChecksCount());
    list.add(present_slowDeadMinionChecksCount);
    if (present_slowDeadMinionChecksCount)
      list.add(slowDeadMinionChecksCount);

    boolean present_slowestDeadMinionCheckIntervalMillis = true && (isSetSlowestDeadMinionCheckIntervalMillis());
    list.add(present_slowestDeadMinionCheckIntervalMillis);
    if (present_slowestDeadMinionCheckIntervalMillis)
      list.add(slowestDeadMinionCheckIntervalMillis);

    return list.hashCode();
  }

  @Override
  public int compareTo(HealthCheckStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSlowHeartbeatsReceivedCount()).compareTo(other.isSetSlowHeartbeatsReceivedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlowHeartbeatsReceivedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slowHeartbeatsReceivedCount, other.slowHeartbeatsReceivedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartbeatsReceivedCount()).compareTo(other.isSetHeartbeatsReceivedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeatsReceivedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeatsReceivedCount, other.heartbeatsReceivedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageHeartbeatIntervalMillis()).compareTo(other.isSetAverageHeartbeatIntervalMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageHeartbeatIntervalMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageHeartbeatIntervalMillis, other.averageHeartbeatIntervalMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlowestHeartbeatIntervalMillis()).compareTo(other.isSetSlowestHeartbeatIntervalMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlowestHeartbeatIntervalMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slowestHeartbeatIntervalMillis, other.slowestHeartbeatIntervalMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlowestHeartbeatMinionId()).compareTo(other.isSetSlowestHeartbeatMinionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlowestHeartbeatMinionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slowestHeartbeatMinionId, other.slowestHeartbeatMinionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlowDeadMinionChecksCount()).compareTo(other.isSetSlowDeadMinionChecksCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlowDeadMinionChecksCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slowDeadMinionChecksCount, other.slowDeadMinionChecksCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlowestDeadMinionCheckIntervalMillis()).compareTo(other.isSetSlowestDeadMinionCheckIntervalMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlowestDeadMinionCheckIntervalMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slowestDeadMinionCheckIntervalMillis, other.slowestDeadMinionCheckIntervalMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HealthCheckStats(");
    boolean first = true;

    if (isSetSlowHeartbeatsReceivedCount()) {
      sb.append("slowHeartbeatsReceivedCount:");
      sb.append(this.slowHeartbeatsReceivedCount);
      first = false;
    }
    if (isSetHeartbeatsReceivedCount()) {
      if (!first) sb.append(", ");
      sb.append("heartbeatsReceivedCount:");
      sb.append(this.heartbeatsReceivedCount);
      first = false;
    }
    if (isSetAverageHeartbeatIntervalMillis()) {
      if (!first) sb.append(", ");
      sb.append("averageHeartbeatIntervalMillis:");
      sb.append(this.averageHeartbeatIntervalMillis);
      first = false;
    }
    if (isSetSlowestHeartbeatIntervalMillis()) {
      if (!first) sb.append(", ");
      sb.append("slowestHeartbeatIntervalMillis:");
      sb.append(this.slowestHeartbeatIntervalMillis);
      first = false;
    }
    if (isSetSlowestHeartbeatMinionId()) {
      if (!first) sb.append(", ");
      sb.append("slowestHeartbeatMinionId:");
      if (this.slowestHeartbeatMinionId == null) {
        sb.append("null");
      } else {
        sb.append(this.slowestHeartbeatMinionId);
      }
      first = false;
    }
    if (isSetSlowDeadMinionChecksCount()) {
      if (!first) sb.append(", ");
      sb.append("slowDeadMinionChecksCount:");
      sb.append(this.slowDeadMinionChecksCount);
      first = false;
    }
    if (isSetSlowestDeadMinionCheckIntervalMillis()) {
      if (!first) sb.append(", ");
      sb.append("slowestDeadMinionCheckIntervalMillis:");
      sb.append(this.slowestDeadMinionCheckIntervalMillis);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HealthCheckStatsStandardSchemeFactory implements SchemeFactory {
    public HealthCheckStatsStandardScheme getScheme() {
      return new HealthCheckStatsStandardScheme();
    }
  }

  private static class HealthCheckStatsStandardScheme extends StandardScheme<HealthCheckStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HealthCheckStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLOW_HEARTBEATS_RECEIVED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slowHeartbeatsReceivedCount = iprot.readI32();
              struct.setSlowHeartbeatsReceivedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEARTBEATS_RECEIVED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heartbeatsReceivedCount = iprot.readI32();
              struct.setHeartbeatsReceivedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AVERAGE_HEARTBEAT_INTERVAL_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.averageHeartbeatIntervalMillis = iprot.readI64();
              struct.setAverageHeartbeatIntervalMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLOWEST_HEARTBEAT_INTERVAL_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.slowestHeartbeatIntervalMillis = iprot.readI64();
              struct.setSlowestHeartbeatIntervalMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLOWEST_HEARTBEAT_MINION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slowestHeartbeatMinionId = iprot.readString();
              struct.setSlowestHeartbeatMinionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SLOW_DEAD_MINION_CHECKS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slowDeadMinionChecksCount = iprot.readI32();
              struct.setSlowDeadMinionChecksCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.slowestDeadMinionCheckIntervalMillis = iprot.readI64();
              struct.setSlowestDeadMinionCheckIntervalMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HealthCheckStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSlowHeartbeatsReceivedCount()) {
        oprot.writeFieldBegin(SLOW_HEARTBEATS_RECEIVED_COUNT_FIELD_DESC);
        oprot.writeI32(struct.slowHeartbeatsReceivedCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeartbeatsReceivedCount()) {
        oprot.writeFieldBegin(HEARTBEATS_RECEIVED_COUNT_FIELD_DESC);
        oprot.writeI32(struct.heartbeatsReceivedCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAverageHeartbeatIntervalMillis()) {
        oprot.writeFieldBegin(AVERAGE_HEARTBEAT_INTERVAL_MILLIS_FIELD_DESC);
        oprot.writeI64(struct.averageHeartbeatIntervalMillis);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSlowestHeartbeatIntervalMillis()) {
        oprot.writeFieldBegin(SLOWEST_HEARTBEAT_INTERVAL_MILLIS_FIELD_DESC);
        oprot.writeI64(struct.slowestHeartbeatIntervalMillis);
        oprot.writeFieldEnd();
      }
      if (struct.slowestHeartbeatMinionId != null) {
        if (struct.isSetSlowestHeartbeatMinionId()) {
          oprot.writeFieldBegin(SLOWEST_HEARTBEAT_MINION_ID_FIELD_DESC);
          oprot.writeString(struct.slowestHeartbeatMinionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSlowDeadMinionChecksCount()) {
        oprot.writeFieldBegin(SLOW_DEAD_MINION_CHECKS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.slowDeadMinionChecksCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSlowestDeadMinionCheckIntervalMillis()) {
        oprot.writeFieldBegin(SLOWEST_DEAD_MINION_CHECK_INTERVAL_MILLIS_FIELD_DESC);
        oprot.writeI64(struct.slowestDeadMinionCheckIntervalMillis);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HealthCheckStatsTupleSchemeFactory implements SchemeFactory {
    public HealthCheckStatsTupleScheme getScheme() {
      return new HealthCheckStatsTupleScheme();
    }
  }

  private static class HealthCheckStatsTupleScheme extends TupleScheme<HealthCheckStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HealthCheckStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSlowHeartbeatsReceivedCount()) {
        optionals.set(0);
      }
      if (struct.isSetHeartbeatsReceivedCount()) {
        optionals.set(1);
      }
      if (struct.isSetAverageHeartbeatIntervalMillis()) {
        optionals.set(2);
      }
      if (struct.isSetSlowestHeartbeatIntervalMillis()) {
        optionals.set(3);
      }
      if (struct.isSetSlowestHeartbeatMinionId()) {
        optionals.set(4);
      }
      if (struct.isSetSlowDeadMinionChecksCount()) {
        optionals.set(5);
      }
      if (struct.isSetSlowestDeadMinionCheckIntervalMillis()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSlowHeartbeatsReceivedCount()) {
        oprot.writeI32(struct.slowHeartbeatsReceivedCount);
      }
      if (struct.isSetHeartbeatsReceivedCount()) {
        oprot.writeI32(struct.heartbeatsReceivedCount);
      }
      if (struct.isSetAverageHeartbeatIntervalMillis()) {
        oprot.writeI64(struct.averageHeartbeatIntervalMillis);
      }
      if (struct.isSetSlowestHeartbeatIntervalMillis()) {
        oprot.writeI64(struct.slowestHeartbeatIntervalMillis);
      }
      if (struct.isSetSlowestHeartbeatMinionId()) {
        oprot.writeString(struct.slowestHeartbeatMinionId);
      }
      if (struct.isSetSlowDeadMinionChecksCount()) {
        oprot.writeI32(struct.slowDeadMinionChecksCount);
      }
      if (struct.isSetSlowestDeadMinionCheckIntervalMillis()) {
        oprot.writeI64(struct.slowestDeadMinionCheckIntervalMillis);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HealthCheckStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.slowHeartbeatsReceivedCount = iprot.readI32();
        struct.setSlowHeartbeatsReceivedCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.heartbeatsReceivedCount = iprot.readI32();
        struct.setHeartbeatsReceivedCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.averageHeartbeatIntervalMillis = iprot.readI64();
        struct.setAverageHeartbeatIntervalMillisIsSet(true);
      }
      if (incoming.get(3)) {
        struct.slowestHeartbeatIntervalMillis = iprot.readI64();
        struct.setSlowestHeartbeatIntervalMillisIsSet(true);
      }
      if (incoming.get(4)) {
        struct.slowestHeartbeatMinionId = iprot.readString();
        struct.setSlowestHeartbeatMinionIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.slowDeadMinionChecksCount = iprot.readI32();
        struct.setSlowDeadMinionChecksCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.slowestDeadMinionCheckIntervalMillis = iprot.readI64();
        struct.setSlowestDeadMinionCheckIntervalMillisIsSet(true);
      }
    }
  }

}

